const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkApiUsage() {
  console.log('üîç API ƒ∞stifad…ô Statistikalarƒ± Yoxlanƒ±lƒ±r...\n');
  
  try {
    // API a√ßarlarƒ±nƒ±n cari v…ôziyy…ôti
    const apiKeys = await prisma.apiKey.findMany({
      orderBy: { service: 'asc' }
    });
    
    console.log('üìä API A√ßarlarƒ± V…ôziyy…ôti:');
    console.log('='.repeat(50));
    
    for (const key of apiKeys) {
      console.log(`Service: ${key.service}`);
      console.log(`Active: ${key.active}`);
      console.log(`Daily Usage: ${key.dailyUsage}/${key.dailyLimit}`);
      console.log(`Total Usage: ${key.usageCount}`);
      console.log(`Last Used: ${key.lastUsed}`);
      console.log(`Last Result: ${key.lastResult}`);
      console.log('-'.repeat(30));
    }
    
    // Son 24 saat …ôrzind…ô API istifad…ôsi
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    
    const recentUsage = await prisma.apiKey.findMany({
      where: {
        lastUsed: {
          gte: yesterday
        }
      },
      select: {
        service: true,
        dailyUsage: true,
        usageCount: true,
        lastUsed: true
      }
    });
    
    console.log('\nüìà Son 24 Saat API ƒ∞stifad…ôsi:');
    console.log('='.repeat(50));
    
    let totalDailyUsage = 0;
    recentUsage.forEach(usage => {
      console.log(`${usage.service}: ${usage.dailyUsage} istifad…ô`);
      totalDailyUsage += usage.dailyUsage;
    });
    
    console.log(`\nüö® √úMUMI G√úNL√ºk ƒ∞STƒ∞FAD∆è: ${totalDailyUsage}`);
    
    // CV-l…ôr statistikasƒ± (API istifad…ôsini s…ôb…ôb olacaq …ôm…ôliyyatlar)
    console.log('\nüìã CV Statistikalarƒ±:');
    console.log('='.repeat(50));
    
    const totalCVs = await prisma.cV.count();
    const todayCVs = await prisma.cV.count({
      where: {
        createdAt: {
          gte: yesterday
        }
      }
    });
    
    console.log(`√úmumi CV sayƒ±: ${totalCVs}`);
    console.log(`Bu g√ºn yaradƒ±lan CV-l…ôr: ${todayCVs}`);
    
    // Cover Letter statistikasƒ±
    console.log('\nüìÑ Cover Letter Statistikalarƒ±:');
    console.log('='.repeat(50));
    
    try {
      const totalCoverLetters = await prisma.coverLetter.count();
      const todayCoverLetters = await prisma.coverLetter.count({
        where: {
          createdAt: {
            gte: yesterday
          }
        }
      });
      
      console.log(`√úmumi Cover Letter sayƒ±: ${totalCoverLetters}`);
      console.log(`Bu g√ºn yaradƒ±lan Cover Letter-l…ôr: ${todayCoverLetters}`);
    } catch (error) {
      console.log('Cover Letter c…ôdv…ôli m√∂vcud deyil');
    }
    
    // ƒ∞stifad…ô√ßi statistikasƒ±
    console.log('\nüë• ƒ∞stifad…ô√ßi Statistikalarƒ±:');
    console.log('='.repeat(50));
    
    const totalUsers = await prisma.user.count();
    const activeUsers = await prisma.user.count({
      where: {
        lastLogin: {
          gte: yesterday
        }
      }
    });
    
    console.log(`√úmumi istifad…ô√ßi sayƒ±: ${totalUsers}`);
    console.log(`Aktiv istifad…ô√ßil…ôr (24 saat): ${activeUsers}`);
    
    // Problemli v…ôziyy…ôtl…ôri m√º…ôyy…ôn et
    console.log('\n‚ö†Ô∏è  Potensial Probleml…ôr:');
    console.log('='.repeat(50));
    
    const problematicKeys = apiKeys.filter(key => 
      key.dailyUsage > (key.dailyLimit * 0.8) // 80%-d…ôn √ßox istifad…ô
    );
    
    if (problematicKeys.length > 0) {
      console.log('üî¥ √áox istifad…ô edil…ôn API a√ßarlarƒ±:');
      problematicKeys.forEach(key => {
        console.log(`  - ${key.service}: ${key.dailyUsage}/${key.dailyLimit} (${Math.round(key.dailyUsage/key.dailyLimit*100)}%)`);
      });
    }
    
    if (totalDailyUsage > 500) {
      console.log('üî¥ G√ºnl√ºk API istifad…ôsi √ßox y√ºks…ôkdir!');
      console.log('   Potensial s…ôb…ôbl…ôr:');
      console.log('   - Loop v…ô ya t…ôkrarlanan sorƒüular');
      console.log('   - Rate limiting i≈ül…ômir');
      console.log('   - Bot v…ô ya spam f…ôaliyy…ôti');
    }
    
  } catch (error) {
    console.error('‚ùå X…ôta:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkApiUsage();