const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function detailedApiAnalysis() {
  console.log('üîç ∆ètraflƒ± API T…ôhlili...\n');
  
  try {
    // B√ºt√ºn API a√ßarlarƒ±nƒ±n √ºmumi statistikasƒ±
    const allApiKeys = await prisma.apiKey.findMany();
    
    console.log('üìä B√ºt√ºn API A√ßarlarƒ±:');
    console.log('='.repeat(60));
    
    let totalUsageAllTime = 0;
    let totalDailyUsage = 0;
    let geminiTotal = 0;
    let scrapingdogTotal = 0;
    
    allApiKeys.forEach(key => {
      totalUsageAllTime += key.usageCount;
      totalDailyUsage += key.dailyUsage;
      
      if (key.service === 'gemini') {
        geminiTotal += key.usageCount;
      } else if (key.service === 'scrapingdog') {
        scrapingdogTotal += key.usageCount;
      }
    });
    
    console.log(`üî• √úMUMƒ∞ ƒ∞STƒ∞FAD∆è (B√ºt√ºn zamanlar): ${totalUsageAllTime}`);
    console.log(`üìÖ √úMUMƒ∞ G√úNL√úK ƒ∞STƒ∞FAD∆è: ${totalDailyUsage}`);
    console.log(`ü§ñ Gemini √ºmumi: ${geminiTotal}`);
    console.log(`üï∑Ô∏è  ScrapingDog √ºmumi: ${scrapingdogTotal}`);
    
    // ∆èn √ßox istifad…ô edil…ôn a√ßarlar
    console.log('\nüèÜ ∆èn √áox ƒ∞stifad…ô Edil…ôn API A√ßarlarƒ±:');
    console.log('='.repeat(60));
    
    const topUsedKeys = allApiKeys
      .filter(key => key.usageCount > 0)
      .sort((a, b) => b.usageCount - a.usageCount)
      .slice(0, 5);
    
    topUsedKeys.forEach((key, index) => {
      console.log(`${index + 1}. ${key.service} - ${key.usageCount} istifad…ô (g√ºnl√ºk: ${key.dailyUsage})`);
      console.log(`   Son istifad…ô: ${key.lastUsed}`);
      console.log(`   Active: ${key.active}`);
    });
    
    // Suspicious patterns yoxla
    console.log('\nüö® ≈û√úBH∆èLƒ∞ N√úMUN∆èL∆èR:');
    console.log('='.repeat(60));
    
    const suspiciousKeys = allApiKeys.filter(key => 
      key.dailyUsage > 100 || // G√ºnl√ºk 100-d…ôn √ßox
      (key.usageCount > 0 && key.dailyUsage === key.usageCount) // B√ºt√ºn istifad…ô bug√ºnd√ºr
    );
    
    if (suspiciousKeys.length > 0) {
      console.log('‚ö†Ô∏è  Y√ºks…ôk istifad…ôli a√ßarlar:');
      suspiciousKeys.forEach(key => {
        console.log(`  - ${key.service}: ${key.dailyUsage} g√ºnl√ºk, ${key.usageCount} √ºmumi`);
        console.log(`    Sonuncu: ${key.lastUsed}`);
        console.log(`    N…ôtic…ô: ${key.lastResult}`);
      });
    } else {
      console.log('‚úÖ ≈û√ºbh…ôli n√ºmun…ô tapƒ±lmadƒ±');
    }
    
    // Son 7 g√ºn√ºn statistikasƒ±
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    const weeklyActiveKeys = allApiKeys.filter(key => 
      key.lastUsed && key.lastUsed >= sevenDaysAgo
    );
    
    console.log('\nüìà Son 7 G√ºn Aktiv API A√ßarlarƒ±:');
    console.log('='.repeat(60));
    console.log(`Aktiv a√ßar sayƒ±: ${weeklyActiveKeys.length}`);
    
    // Error rate analizi
    const errorKeys = allApiKeys.filter(key => 
      key.lastResult && key.lastResult.includes('error')
    );
    
    console.log('\n‚ùå X∆èTA ANALƒ∞Zƒ∞:');
    console.log('='.repeat(60));
    console.log(`X…ôtalƒ± API a√ßarlarƒ±: ${errorKeys.length}`);
    
    if (errorKeys.length > 0) {
      console.log('X…ôtalƒ± a√ßarlar:');
      errorKeys.forEach(key => {
        console.log(`  - ${key.service}: ${key.lastResult} (${key.usageCount} istifad…ô)`);
      });
    }
    
    // Rate limiting yoxlanƒ±≈üƒ±
    console.log('\n‚è±Ô∏è  RATE LIMITING V∆èZƒ∞YY∆èTƒ∞:');
    console.log('='.repeat(60));
    
    const nearLimitKeys = allApiKeys.filter(key => 
      key.dailyUsage > (key.dailyLimit * 0.5)
    );
    
    if (nearLimitKeys.length > 0) {
      console.log('Limit yaxƒ±nƒ±nda olan a√ßarlar:');
      nearLimitKeys.forEach(key => {
        const percentage = Math.round((key.dailyUsage / key.dailyLimit) * 100);
        console.log(`  - ${key.service}: ${key.dailyUsage}/${key.dailyLimit} (${percentage}%)`);
      });
    } else {
      console.log('‚úÖ B√ºt√ºn a√ßarlar limit daxilind…ôdir');
    }
    
  } catch (error) {
    console.error('‚ùå X…ôta:', error);
  } finally {
    await prisma.$disconnect();
  }
}

detailedApiAnalysis();