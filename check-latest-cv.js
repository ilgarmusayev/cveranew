const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkLatestCV() {
  try {
    console.log('üîç ∆èn son yaradƒ±lan CV m…ôlumatlarƒ± yoxlanƒ±lƒ±r...');
    
    // Get latest CV
    const latestCV = await prisma.cV.findFirst({
      orderBy: {
        createdAt: 'desc'
      },
      where: {
        title: {
          contains: 'Nizamali' // Az …ôvv…ôl yaradƒ±lan CV
        }
      }
    });
    
    if (!latestCV) {
      console.error('‚ùå He√ß bir CV tapƒ±lmadƒ±');
      return;
    }
    
    console.log('‚úÖ CV tapƒ±ldƒ±:', latestCV.id);
    console.log('üìã CV ba≈ülƒ±ƒüƒ±:', latestCV.title);
    console.log('üìÖ Yaradƒ±lma tarixi:', latestCV.createdAt);
    
    const cvData = latestCV.cv_data;
    
    if (!cvData) {
      console.error('‚ùå CV data sah…ôsi bo≈üdur');
      return;
    }
    
    console.log('\nüìä CV m…ôlumatlarƒ± analizi:');
    
    // Personal Info
    if (cvData.personalInfo) {
      console.log('\nüë§ ≈û…ôxsi m…ôlumatlar:');
      console.log('- Ad Soyad:', cvData.personalInfo.fullName);
      console.log('- Ad:', cvData.personalInfo.firstName);
      console.log('- Soyad:', cvData.personalInfo.lastName);
      console.log('- Ba≈ülƒ±q:', cvData.personalInfo.title);
      console.log('- Email:', cvData.personalInfo.email || 'Yox');
      console.log('- Telefon:', cvData.personalInfo.phone || 'Yox');
      console.log('- Yer:', cvData.personalInfo.location);
      console.log('- LinkedIn:', cvData.personalInfo.linkedin);
      console.log('- ≈û…ôkil:', cvData.personalInfo.profilePicture ? 'Var' : 'Yox');
      console.log('- X√ºlas…ô:', cvData.personalInfo.summary ? cvData.personalInfo.summary.substring(0, 100) + '...' : 'Yox');
    }
    
    // Experience
    if (cvData.experience && Array.isArray(cvData.experience)) {
      console.log(`\nüíº ƒ∞≈ü t…ôcr√ºb…ôsi (${cvData.experience.length} m…ôlumat):`);
      cvData.experience.forEach((exp, index) => {
        console.log(`  ${index + 1}. ${exp.position} @ ${exp.company}`);
        console.log(`     Tarix: ${exp.startDate} - ${exp.endDate || (exp.current ? 'Present' : 'N/A')}`);
        console.log(`     Yer: ${exp.location || 'N/A'}`);
        console.log(`     T…ôsvir: ${exp.description ? exp.description.substring(0, 100) + '...' : 'N/A'}`);
      });
    } else {
      console.log('\nüíº ƒ∞≈ü t…ôcr√ºb…ôsi: Yox v…ô ya bo≈ü');
    }
    
    // Education
    if (cvData.education && Array.isArray(cvData.education)) {
      console.log(`\nüéì T…ôhsil (${cvData.education.length} m…ôlumat):`);
      cvData.education.forEach((edu, index) => {
        console.log(`  ${index + 1}. ${edu.degree} @ ${edu.institution}`);
        console.log(`     Sah…ô: ${edu.fieldOfStudy || 'N/A'}`);
        console.log(`     Tarix: ${edu.startDate} - ${edu.endDate || 'N/A'}`);
        console.log(`     Qiym…ôt: ${edu.grade || 'N/A'}`);
      });
    } else {
      console.log('\nüéì T…ôhsil: Yox v…ô ya bo≈ü');
    }
    
    // Skills
    if (cvData.skills && Array.isArray(cvData.skills)) {
      console.log(`\nüí° Bacarƒ±qlar (${cvData.skills.length} m…ôlumat):`);
      cvData.skills.forEach((skill, index) => {
        console.log(`  ${index + 1}. ${skill.name} (${skill.level || 'No level'})`);
      });
    } else {
      console.log('\nüí° Bacarƒ±qlar: Yox v…ô ya bo≈ü');
    }
    
    // Projects
    if (cvData.projects && Array.isArray(cvData.projects)) {
      console.log(`\nüèÜ Layih…ôl…ôr (${cvData.projects.length} m…ôlumat):`);
      cvData.projects.forEach((proj, index) => {
        console.log(`  ${index + 1}. ${proj.name}`);
        console.log(`     URL: ${proj.url || 'N/A'}`);
        console.log(`     T…ôsvir: ${proj.description ? proj.description.substring(0, 100) + '...' : 'N/A'}`);
      });
    } else {
      console.log('\nüèÜ Layih…ôl…ôr: Yox v…ô ya bo≈ü');
    }
    
    // Awards
    if (cvData.awards && Array.isArray(cvData.awards)) {
      console.log(`\nü•á M√ºkafatlar (${cvData.awards.length} m…ôlumat):`);
      cvData.awards.forEach((award, index) => {
        console.log(`  ${index + 1}. ${award.name}`);
        console.log(`     Ver…ôn: ${award.issuer || 'N/A'}`);
        console.log(`     Tarix: ${award.date || 'N/A'}`);
      });
    } else {
      console.log('\nü•á M√ºkafatlar: Yox v…ô ya bo≈ü');
    }
    
    // Languages
    if (cvData.languages && Array.isArray(cvData.languages)) {
      console.log(`\nüó£Ô∏è Dill…ôr (${cvData.languages.length} m…ôlumat):`);
      cvData.languages.forEach((lang, index) => {
        console.log(`  ${index + 1}. ${lang.name} (${lang.proficiency || 'No level'})`);
      });
    } else {
      console.log('\nüó£Ô∏è Dill…ôr: Yox v…ô ya bo≈ü');
    }
    
    // Volunteering
    if (cvData.volunteering && Array.isArray(cvData.volunteering)) {
      console.log(`\nü§ù K√∂n√ºll√º i≈ül…ôr (${cvData.volunteering.length} m…ôlumat):`);
      cvData.volunteering.forEach((vol, index) => {
        console.log(`  ${index + 1}. ${vol.role} @ ${vol.organization}`);
        console.log(`     S…ôb…ôb: ${vol.cause || 'N/A'}`);
        console.log(`     Tarix: ${vol.startDate} - ${vol.endDate || (vol.current ? 'Present' : 'N/A')}`);
      });
    } else {
      console.log('\nü§ù K√∂n√ºll√º i≈ül…ôr: Yox v…ô ya bo≈ü');
    }
    
    console.log('\n‚úÖ CV m…ôlumatlarƒ± analizi tamamlandƒ±');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkLatestCV();
