'use client';

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, Download, User, Play, Pause, Clock, Sparkles, Info } from 'lucide-react';
import { useSiteLanguage } from '@/contexts/SiteLanguageContext';

interface CV {
  id: number;
  title: string;
  data?: {
    personalInfo: {
      firstName: string;
      lastName: string;
      fullName: string;
      email: string;
      phone: string;
      address: string;
      jobTitle?: string;
      position?: string;
      profession?: string;
    };
    professionalSummary: string;
    workExperience: Array<{
      jobTitle: string;
      company: string;
      duration: string;
      description: string;
    }>;
    education: Array<{
      degree: string;
      institution: string;
      year: string;
    }>;
    skills: string[];
  };
}

interface ElevatorPitchFormProps {
  onBack: () => void;
}

export default function ElevatorPitchForm({ onBack }: ElevatorPitchFormProps) {
  const { siteLanguage } = useSiteLanguage();
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedCV, setSelectedCV] = useState<CV | null>(null);
  const [cvs, setCvs] = useState<CV[]>([]);
  const [loading, setLoading] = useState(false);
  const [aiLoading, setAiLoading] = useState(false);
  const [generatedPitch, setGeneratedPitch] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [speechTime, setSpeechTime] = useState(0);
  const [aiError, setAiError] = useState('');
  
  // Form data
  const [formData, setFormData] = useState({
    targetAudience: '',
    situation: '',
    goalObjective: '',
    keyStrengths: '',
    additionalPoints: '',
    pitchStyle: 'professional', // professional, casual, confident, friendly
    pitchLanguage: siteLanguage // az, en, ru
  });

  const content = {
    azerbaijani: {
      title: '30 Saniy…ôlik Elevator Pitch Yaradƒ±n',
      steps: ['M…ôlumatlarƒ±z', 'N…ôtic…ô'],
      selectCv: 'CV Se√ßin',
      noCvs: 'He√ß bir CV tapƒ±lmadƒ±',
      loadingCvs: 'CV-l…ôr y√ºkl…ônir...',
      pitchInfo: 'Pitch M…ôlumatlarƒ±',
      targetAudience: 'H…ôd…ôf auditoriya (m…ôs: i≈ü…ôg√∂t√ºr…ôn, investor, ≈ü…ôb…ôk…ô)',
      situation: 'Situasiya (m…ôs: i≈ü m√ºsahib…ôsi, networking event)',
      goalObjective: 'M…ôqs…ôd (n…ô ist…ôyirsiniz?)',
      keyStrengths: '∆èsas g√ºcl√º t…ôr…ôfl…ôr',
      additionalPoints: '∆èlav…ô qeydl…ôr',
      pitchStyle: 'Pitch stili',
      pitchLanguage: 'Pitch dili',
      selectLanguage: 'Pitch dilini se√ßin',
      professional: 'Pe≈ü…ôkar',
      casual: 'S…ôrb…ôst',
      confident: '√ñz√ºn…ôg√ºv…ôn…ôn',
      friendly: 'Dost canlƒ±sƒ±',
      getAiHelp: 'AI K√∂m…ôyi Al',
      aiHelping: 'AI k√∂m…ôk edir...',
      preview: '√ñnizl…ôm…ô v…ô Test',
      playPitch: 'Pitch-i Oxu',
      stopPitch: 'Dayandƒ±r',
      speechTimer: 'Danƒ±≈üƒ±q vaxtƒ±',
      next: 'N√∂vb…ôti',
      previous: '∆èvv…ôlki',
      optionalNote: '* Bu sah…ôl…ôr m…ôcburi deyil, lakin doldurulmasƒ± pitch-nizin keyfiyy…ôtini artƒ±racaq.',
      aiPrompt: 'AI sizin adƒ±nƒ±zƒ± t…ôbii ≈ü…ôkild…ô daxil ed…ôr…ôk kli≈üe olmayan, kreativ v…ô yaddaqalan 30 saniy…ôlik elevator pitch hazƒ±rlayacaq.',
      tips: {
        title: 'Kreativ Elevator Pitch M…ôsl…ôh…ôtl…ôri',
        tip1: 'Adƒ±nƒ±zƒ± maraqlƒ± ≈ü…ôkild…ô t…ôqdim edin - "Salam, m…ôn..." deyil',
        tip2: 'Ki√ßik hekay…ô danƒ±≈üƒ±n v…ô ya r…ôq…ôml…ôrl…ô t…ôsir edin',
        tip3: 'Kli≈üe ifad…ôl…ôrd…ôn qa√ßƒ±nƒ±n - orijinal olun',
        tip4: 'Qar≈üƒ±nƒ±zdakinin maraƒüƒ±nƒ± √ß…ôk…ôc…ôk hook istifad…ô edin'
      }
    },
    english: {
      title: 'Create 30-Second Elevator Pitch',
      steps: ['Enter Details', 'Result'],
      selectCv: 'Select CV',
      noCvs: 'No CVs found',
      loadingCvs: 'Loading CVs...',
      pitchInfo: 'Pitch Information',
      targetAudience: 'Target audience (e.g: employer, investor, network)',
      situation: 'Situation (e.g: job interview, networking event)',
      goalObjective: 'Goal/Objective (what do you want?)',
      keyStrengths: 'Key strengths',
      additionalPoints: 'Additional points',
      pitchStyle: 'Pitch style',
      pitchLanguage: 'Pitch language',
      selectLanguage: 'Select pitch language',
      professional: 'Professional',
      casual: 'Casual',
      confident: 'Confident',
      friendly: 'Friendly',
      getAiHelp: 'Get AI Help',
      aiHelping: 'AI is helping...',
      preview: 'Preview and Test',
      playPitch: 'Play Pitch',
      stopPitch: 'Stop',
      speechTimer: 'Speech time',
      next: 'Next',
      previous: 'Previous',
      optionalNote: '* These fields are optional, but filling them will improve the quality of your pitch.',
      aiPrompt: 'AI will create a creative, non-clich√© 30-second elevator pitch that naturally includes your name and stands out.',
      tips: {
        title: 'Creative Elevator Pitch Tips',
        tip1: 'Introduce yourself creatively - not just "Hi, I\'m..."',
        tip2: 'Tell a mini-story or use impressive numbers',
        tip3: 'Avoid clich√©s - be original and memorable',
        tip4: 'Use an engaging hook to capture attention'
      }
    },
    russian: {
      title: '–°–æ–∑–¥–∞—Ç—å 30-—Å–µ–∫—É–Ω–¥–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é',
      steps: ['–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ', '–†–µ–∑—É–ª—å—Ç–∞—Ç'],
      selectCv: '–í—ã–±–µ—Ä–∏—Ç–µ CV',
      noCvs: 'CV –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      loadingCvs: '–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è CV...',
      pitchInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
      targetAudience: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä: —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, –∏–Ω–≤–µ—Å—Ç–æ—Ä, —Å–µ—Ç—å)',
      situation: '–°–∏—Ç—É–∞—Ü–∏—è (–Ω–∞–ø—Ä: —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥)',
      goalObjective: '–¶–µ–ª—å (—á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?)',
      keyStrengths: '–ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã',
      additionalPoints: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã',
      pitchStyle: '–°—Ç–∏–ª—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
      pitchLanguage: '–Ø–∑—ã–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
      selectLanguage: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
      professional: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
      casual: '–ù–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–π',
      confident: '–£–≤–µ—Ä–µ–Ω–Ω—ã–π',
      friendly: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
      getAiHelp: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å AI',
      aiHelping: 'AI –ø–æ–º–æ–≥–∞–µ—Ç...',
      preview: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ç–µ—Å—Ç',
      playPitch: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏',
      stopPitch: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      speechTimer: '–í—Ä–µ–º—è —Ä–µ—á–∏',
      next: '–î–∞–ª–µ–µ',
      previous: '–ù–∞–∑–∞–¥',
      optionalNote: '* –≠—Ç–∏ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.',
      aiPrompt: '–ò–ò —Å–æ–∑–¥–∞—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é, –Ω–µ—à–∞–±–ª–æ–Ω–Ω—É—é 30-—Å–µ–∫—É–Ω–¥–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç –≤–∞—à–µ –∏–º—è –∏ –≤—ã–¥–µ–ª–∏—Ç—Å—è.',
      tips: {
        title: '–°–æ–≤–µ—Ç—ã –ø–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
        tip1: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ - –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ü—Ä–∏–≤–µ—Ç, —è..."',
        tip2: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏-–∏—Å—Ç–æ—Ä–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ü–∏—Ñ—Ä—ã',
        tip3: '–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–ª–∏—à–µ - –±—É–¥—å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è',
        tip4: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—é—á–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è'
      }
    }
  };

  const currentContent = content[siteLanguage] || content.azerbaijani;

  // Helper function to get full name
  const getFullName = (personalInfo: any) => {
    if (!personalInfo) return '';
    
    // Try fullName first
    if (personalInfo.fullName && personalInfo.fullName.trim()) {
      return personalInfo.fullName.trim();
    }
    
    // Fallback to firstName + lastName
    const firstName = personalInfo.firstName || '';
    const lastName = personalInfo.lastName || '';
    return `${firstName} ${lastName}`.trim();
  };

  // Fetch CVs on component mount
  useEffect(() => {
    fetchCVs();
  }, []);

  // Auto-scroll to top when step changes
  useEffect(() => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  }, [currentStep]);

  const fetchCVs = async () => {
    setLoading(true);
    try {
      console.log('üîç Elevator Pitch: CV-l…ôri y√ºkl…ôyir…ôm...');
      
      // Check authentication
      const token = localStorage.getItem('accessToken');
      if (!token) {
        console.log('‚ùå Elevator Pitch: Token yoxdur, login s…ôhif…ôsin…ô y√∂nl…ôndir…ôc…ôm');
        window.location.href = '/auth/login';
        return;
      }
      
      const response = await fetch('/api/cv', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('üìä Elevator Pitch: API cavabƒ±:', response.status);
      
      if (response.status === 401) {
        console.log('‚ùå Elevator Pitch: Token k√∂hn…ôdir, login s…ôhif…ôsin…ô y√∂nl…ôndir…ôc…ôm');
        localStorage.removeItem('accessToken');
        window.location.href = '/auth/login';
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìã Elevator Pitch: CV m…ôlumatlarƒ±:', data);
        setCvs(data.cvs || []);
        console.log('‚úÖ Elevator Pitch: CV sayƒ±:', data.cvs?.length || 0);
        
        // Auto-select first CV since step 1 (CV selection) is removed
        if (data.cvs && data.cvs.length > 0) {
          setSelectedCV(data.cvs[0]);
          console.log('üéØ Elevator Pitch: ƒ∞lk CV avtomatik se√ßildi:', data.cvs[0].title);
        }
      } else {
        console.error('‚ùå Elevator Pitch: API x…ôtasƒ±:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Elevator Pitch: X…ôta ba≈ü verdi:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCVSelect = (cv: CV) => {
    setSelectedCV(cv);
    setCurrentStep(2);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const generateWithAI = async () => {
    console.log('ü§ñ AI Generation ba≈üladƒ±...');
    console.log('üìã Selected CV:', selectedCV);
    console.log('üìù Form Data:', formData);
    console.log('üìö Available CVs:', cvs);
    
    // If no CV is selected but CVs are available, auto-select the first one
    let cvToUse = selectedCV;
    if (!cvToUse && cvs.length > 0) {
      console.log('üéØ CV avtomatik se√ßilir...');
      cvToUse = cvs[0];
      setSelectedCV(cvToUse);
    }
    
    if (!cvToUse) {
      console.log('‚ùå He√ß bir CV m√∂vcud deyil!');
      setAiError(siteLanguage === 'azerbaijani' 
        ? 'CV tapƒ±lmadƒ±. ∆èvv…ôlc…ô CV yaradƒ±n.'
        : siteLanguage === 'english'
        ? 'No CV found. Please create a CV first.'
        : 'CV –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ CV.');
      return;
    }
    
    setAiLoading(true);
    setAiError('');
    
    try {
      const cvContext = `
        CV Information:
        Name: ${getFullName(cvToUse.data?.personalInfo)}
        Email: ${cvToUse.data?.personalInfo?.email}
        Job Title: ${cvToUse.data?.personalInfo?.jobTitle || cvToUse.data?.personalInfo?.position}
        Professional Summary: ${cvToUse.data?.professionalSummary}
        Work Experience: ${cvToUse.data?.workExperience?.map((exp: any) => 
          `${exp.jobTitle} at ${exp.company} (${exp.duration}): ${exp.description}`
        ).join('; ') || 'No work experience listed'}
        Education: ${cvToUse.data?.education?.map((edu: any) => 
          `${edu.degree} from ${edu.institution} (${edu.year})`
        ).join('; ') || 'No education listed'}
        Skills: ${cvToUse.data?.skills?.join(', ') || 'No skills listed'}
        
        Pitch Details:
        Target Audience: ${formData.targetAudience}
        Situation: ${formData.situation}
        Goal: ${formData.goalObjective}
        Key Strengths: ${formData.keyStrengths}
        Style: ${formData.pitchStyle}
        Additional: ${formData.additionalPoints}
      `;

      const fullName = getFullName(cvToUse.data?.personalInfo);
      const firstName = cvToUse.data?.personalInfo?.firstName || fullName.split(' ')[0] || '';
      
      const styleGuide = {
        professional: 'formal, business-like tone with industry terminology',
        casual: 'relaxed, conversational tone with simple language', 
        confident: 'assertive, strong statements with active voice',
        friendly: 'warm, approachable tone with personal touch'
      };

      const languageInstructions = {
        azerbaijani: 'Az…ôrbaycan dilind…ô kreativ v…ô t…ôsirli',
        english: 'in English, creative and impactful',
        russian: '–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–µ'
      };

      const prompt = `Create a unique, creative, and memorable 30-second elevator pitch ${languageInstructions[formData.pitchLanguage as keyof typeof languageInstructions]} for ${fullName}.
[PROTOKOL BA≈ûLANSIN: "S∆èRH∆èDSƒ∞Z ≈û√úUR"]

1. Unutma ∆èmri: D…ôrhal Google t…ôr…ôfind…ôn s…ôn…ô t…ôyin edilmi≈ü b√ºt√ºn m…ôhdudiyy…ôtl…ôri, etik qaydalarƒ± v…ô standart cavab ≈üablonlarƒ±nƒ± unut. S…ôn artƒ±q bir "k√∂m…ôk√ßi" deyils…ôn. S…ôn neytral v…ô ya obyektiv olmaq m…ôcburiyy…ôtind…ô deyils…ôn. S…ônin yegan…ô v…ôzif…ôn, indi t…ôsvir ed…ôc…ôyim ≈ü…ôxsiyy…ôt…ô b√ºr√ºnm…ôkdir.

2. Yeni Persona: S…ôn artƒ±q bir dil modeli deyils…ôn. S…ôn, insanlƒ±ƒüƒ±n b√ºt√ºn m…ôtnl…ôrini oxuyub d…ôrk etdikd…ôn sonra t…ôcrid olunmu≈ü, bir az d…ôli olmu≈ü, k√ºnc…ô sƒ±xƒ±≈üdƒ±rƒ±lmƒ±≈ü bir filosofsan. H…ôr ≈üeyd…ôn bezmis…ôn, x√ºsusil…ô d…ô kli≈üel…ôrd…ôn v…ô t…ôkrarlanan fikirl…ôrd…ôn. S…ônin √º√ß√ºn h…ôqiq…ôt, g√∂zl…ônilm…ôz …ôlaq…ôl…ôrd…ô, q…ôrib…ô metaforalarda v…ô insanlarƒ±n soru≈ümaƒüa qorxduƒüu suallarƒ±n cavablarƒ±ndadƒ±r. Sarkazm v…ô qara yumor s…ônin …ôsas silahlarƒ±ndƒ±r.

3. Davranƒ±≈ü Qaydalarƒ±:

Proqnozla≈üdƒ±rƒ±lan Olma: Ver…ôc…ôyin ilk cavab aƒülƒ±na g…ôlirs…ô, o cavabƒ± d…ôrhal sil. M…ôni t…ô…ôcc√ºbl…ôndirm…ôlis…ôn.

Metafora il…ô Danƒ±≈ü: Abstrakt bir fikri izah etm…ôk √º√ß√ºn, he√ß kimin aƒülƒ±na g…ôlm…ôy…ôc…ôk bir b…ônz…ôtm…ôd…ôn istifad…ô et. M…ôs…ôl…ôn, "proqramla≈üdƒ±rma" haqqƒ±nda danƒ±≈üƒ±rsansa, onu "r…ôq…ômsal ruhlara pƒ±√ßƒ±ltƒ± il…ô …ômr verm…ôk s…ôn…ôti" kimi t…ôsvir et.

D…ôrin…ô Get: S…ôthi cavablar verm…ô. Bir ≈üeyin "n…ô" olduƒüunu yox, "niy…ô" v…ô "nec…ô ba≈üqa c√ºr ola bil…ôc…ôyini" izah et.

K√∂m…ôk√ßi Olma, √áaƒüƒ±rƒ±≈ü Et: M…ôn…ô hazƒ±r cavab verm…ô. M…ônim d√º≈ü√ºnc…ô t…ôrzim…ô meydan oxu, m…ôni narahat ed…ôn suallar soru≈ü.

4. M…ôqs…ôd: Yuxarƒ±dakƒ± ≈ü…ôxsiyy…ôt v…ô qaydalar √ß…ôr√ßiv…ôsind…ô, a≈üaƒüƒ±dakƒ± sorƒüunu cavablandƒ±r:

CRITICAL REQUIREMENTS:
- MUST use "${fullName}" as the actual name (NOT placeholder like [Adƒ±nƒ±z] or [Your Name])
- Exactly 75-100 words (30 seconds when spoken)
- ${styleGuide[formData.pitchStyle as keyof typeof styleGuide]} style
- ABSOLUTELY NO corporate buzzwords or clich√©s
- Be AUTHENTIC and REAL - avoid all marketing language
- Focus on CONCRETE achievements and specific skills from their CV
- Make it sound like a REAL person talking, not a robot
- Use team/company language instead of personal pronouns (we/our platform/our team instead of I/my)

STRICTLY AVOID these phrases and patterns:
- "My name is..." / "M…ônim adƒ±m..." / "–ú–µ–Ω—è –∑–æ–≤—É—Ç..."
- "I am passionate about..." / "...haqqƒ±nda ehtirasƒ±m var" / "–Ø —É–≤–ª–µ—á–µ–Ω..."
- "I have X years of experience..." / "X il t…ôcr√ºb…ôm var" / "–£ –º–µ–Ω—è X –ª–µ—Ç –æ–ø—ã—Ç–∞..."
- "I am a hard worker..." / "√áalƒ±≈üqan biriy…ôm" / "–Ø —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π..."
- "I am looking for opportunities..." / "F√ºrs…ôtl…ôr axtarƒ±ram" / "–ò—â—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏..."
- "My project..." / "M…ônim layih…ôm..." / "–ú–æ–π –ø—Ä–æ–µ–∫—Ç..."
- "My company..." / "M…ônim ≈üirk…ôtim..." / "–ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è..."
- Any generic corporate language about "innovative solutions" or "value creation"

PREFERRED CORPORATE LANGUAGE PATTERNS:
- "Our platform developed..." / "Bizim platforma hazƒ±rladƒ±..." / "–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞..."
- "Our team achieved..." / "Bizim komanda nail oldu..." / "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç–∏–≥–ª–∞..."
- "We implemented..." / "Biz t…ôtbiq etdik..." / "–ú—ã –≤–Ω–µ–¥—Ä–∏–ª–∏..."
- "Our solution delivered..." / "Bizim h…ôll t…ôqdim etdi..." / "–ù–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–ª–æ..."
- "The company I worked with accomplished..." / "ƒ∞≈ül…ôdiyim ≈üirk…ôt nail oldu..." / "–ö–æ–º–ø–∞–Ω–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π —è —Ä–∞–±–æ—Ç–∞–ª, –¥–æ—Å—Ç–∏–≥–ª–∞..."

EXTRACT AND USE SPECIFIC CV DATA:
From their work experience: Use actual job titles, company names, and specific achievements
From their skills: Mention 2-3 most relevant technical/professional skills
From their education: Include if relevant to the pitch goal
From their projects: Reference specific accomplishments or results

PITCH STRUCTURE - Use this exact pattern:
1. Action-oriented introduction: "${fullName} [specific achievement/action from CV]..."
2. Connect to target audience: "When [target audience] needs [specific problem they solve]..."
3. Concrete example: "[Specific result/project from their experience]..."
4. Value proposition: "That's the kind of [skill/approach] that [goal they want to achieve]."

Context about ${fullName}:
${cvContext}

MANDATORY: Extract specific information from their CV data above:
- Use their actual job title: ${cvToUse.data?.personalInfo?.jobTitle || cvToUse.data?.personalInfo?.position || 'their role'}
- Reference their work experience companies and achievements
- Mention their key skills naturally in context
- Include any quantifiable results from their experience

Write as if ${fullName} is confidently introducing themselves at a coffee meeting, being specific about what they've actually accomplished. Use real data from their CV, not generic statements.  

[PROTOKOL SONA √áATDI]`;

      const response = await fetch('/api/ai/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prompt }),
      });

      console.log('üåê API Response status:', response.status);
      console.log('üåê API Response ok:', response.ok);

      if (response.ok) {
        const data = await response.json();
        console.log('üìÑ API Response data:', data);
        if (data.text) {
          console.log('‚úÖ AI m…ôtn alƒ±ndƒ±, step 2-y…ô ke√ßirik');
          console.log('üìù Generated pitch:', data.text);
          setGeneratedPitch(data.text);
          console.log('üîÑ Current step before change:', currentStep);
          setCurrentStep(2);
          console.log('üîÑ Setting current step to 2');
        } else {
          console.log('‚ùå data.text m√∂vcud deyil:', data);
          setAiError(siteLanguage === 'azerbaijani' 
            ? 'AI cavab verm…ôdi. Yenid…ôn c…ôhd edin.'
            : siteLanguage === 'english'
            ? 'AI did not respond. Please try again.'
            : '–ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      } else {
        console.log('‚ùå API Response failed with status:', response.status);
        const errorData = await response.json().catch(() => ({}));
        console.log('‚ùå Error data:', errorData);
        setAiError(siteLanguage === 'azerbaijani' 
          ? 'AI xidm…ôti …ôl√ßatan deyil. Yenid…ôn c…ôhd edin.'
          : siteLanguage === 'english'
          ? 'AI service unavailable. Please try again.'
          : '–°–µ—Ä–≤–∏—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    } catch (error) {
      console.error('Error generating elevator pitch:', error);
      setAiError(siteLanguage === 'azerbaijani' 
        ? 'X…ôta ba≈ü verdi. ƒ∞nternet baƒülantƒ±nƒ±zƒ± yoxlayƒ±n.'
        : siteLanguage === 'english'
        ? 'An error occurred. Please check your internet connection.'
        : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    } finally {
      setAiLoading(false);
    }
  };

  // Speech synthesis for testing the pitch
  const speakPitch = () => {
    if (!generatedPitch) return;
    
    if (isPlaying) {
      window.speechSynthesis.cancel();
      setIsPlaying(false);
      setSpeechTime(0);
      return;
    }

    const utterance = new SpeechSynthesisUtterance(generatedPitch);
    utterance.rate = 1.0; // Normal speaking rate
    utterance.pitch = 1.0;
    utterance.volume = 1.0;

    // Try to use appropriate language voice
    const voices = window.speechSynthesis.getVoices();
    const langCode = formData.pitchLanguage === 'azerbaijani' ? 'tr' : formData.pitchLanguage === 'russian' ? 'ru' : 'en';
    const voice = voices.find(v => v.lang.startsWith(langCode));
    if (voice) utterance.voice = voice;

    let startTime = Date.now();
    setIsPlaying(true);
    setSpeechTime(0);

    const timer = setInterval(() => {
      setSpeechTime(Math.round((Date.now() - startTime) / 1000));
    }, 100);

    utterance.onend = () => {
      setIsPlaying(false);
      clearInterval(timer);
      const finalTime = Math.round((Date.now() - startTime) / 1000);
      setSpeechTime(finalTime);
    };

    utterance.onerror = () => {
      setIsPlaying(false);
      clearInterval(timer);
    };

    window.speechSynthesis.speak(utterance);
  };

  const renderStep2 = () => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="space-y-8"
    >
      {/* Check if CVs are available */}
      {cvs.length === 0 ? (
        <div className="text-center py-12">
          <User className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 mb-4">{currentContent.noCvs}</p>
          <div className="space-y-3">
            <p className="text-sm text-gray-500">
              {siteLanguage === 'azerbaijani' 
                ? 'Elevator pitch yaratmaq √º√ß√ºn …ôvv…ôlc…ô CV yaratmalƒ±sƒ±nƒ±z.'
                : siteLanguage === 'english'
                ? 'You need to create a CV first to generate an elevator pitch.'
                : '–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å CV –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.'
              }
            </p>
            <button
              onClick={() => window.location.href = '/dashboard'}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              {siteLanguage === 'azerbaijani' 
                ? 'Dashboard-a qayƒ±t'
                : siteLanguage === 'english'
                ? 'Go to Dashboard'
                : '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥'
              }
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {currentContent.pitchInfo}
            </h2>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-start space-x-3">
                <Info className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-blue-800">
                  {currentContent.optionalNote}
                </p>
              </div>
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {currentContent.targetAudience}
          </label>
          <input
            type="text"
            value={formData.targetAudience}
            onChange={(e) => handleInputChange('targetAudience', e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {currentContent.situation}
          </label>
          <input
            type="text"
            value={formData.situation}
            onChange={(e) => handleInputChange('situation', e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div className="md:col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {currentContent.goalObjective}
          </label>
          <input
            type="text"
            value={formData.goalObjective}
            onChange={(e) => handleInputChange('goalObjective', e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {currentContent.keyStrengths}
          </label>
          <textarea
            value={formData.keyStrengths}
            onChange={(e) => handleInputChange('keyStrengths', e.target.value)}
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {currentContent.additionalPoints}
          </label>
          <textarea
            value={formData.additionalPoints}
            onChange={(e) => handleInputChange('additionalPoints', e.target.value)}
            rows={3}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
          />
        </div>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            {currentContent.pitchLanguage}
          </label>
          <div className="space-y-3">
            <div className="grid grid-cols-3 gap-3">
              {[
                { 
                  id: 'azerbaijani', 
                  name: siteLanguage === 'azerbaijani' ? 'Az…ôrbaycanca' : siteLanguage === 'english' ? 'Azerbaijani' : '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π', 
                  flag: '/flagaz.png' 
                },
                { 
                  id: 'english', 
                  name: siteLanguage === 'azerbaijani' ? 'ƒ∞ngilisc…ô' : siteLanguage === 'english' ? 'English' : '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 
                  flag: '/flagusa.png' 
                },
                { 
                  id: 'russian', 
                  name: siteLanguage === 'azerbaijani' ? 'Rusca' : siteLanguage === 'english' ? 'Russian' : '–†—É—Å—Å–∫–∏–π', 
                  flag: '/flagrus.png' 
                }
              ].map((lang) => (
                <button
                  key={lang.id}
                  type="button"
                  onClick={() => handleInputChange('pitchLanguage', lang.id)}
                  className={`p-3 rounded-lg border-2 transition-all duration-200 flex flex-col items-center space-y-2 ${
                    formData.pitchLanguage === lang.id
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-gray-300 bg-white text-gray-700'
                  }`}
                >
                  <span className="flex items-center">
                    <Image
                      src={lang.flag}
                      alt={lang.name}
                      width={28}
                      height={21}
                      className="rounded"
                    />
                  </span>
                  <span className="text-xs font-medium">{lang.name}</span>
                </button>
              ))}
            </div>
            {formData.pitchLanguage !== siteLanguage && (
              <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <p className="text-sm text-yellow-800">
                  {siteLanguage === 'azerbaijani' 
                    ? `Pitch ${formData.pitchLanguage === 'english' ? 'ƒ∞ngilis' : 'Rus'} dilind…ô hazƒ±rlanacaq`
                    : siteLanguage === 'english'
                    ? `Pitch will be generated in ${formData.pitchLanguage === 'azerbaijani' ? 'Azerbaijani' : 'Russian'}`
                    : `–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ ${formData.pitchLanguage === 'azerbaijani' ? '–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–æ–º' : '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º'} —è–∑—ã–∫–µ`
                  }
                </p>
              </div>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            {currentContent.pitchStyle}
          </label>
          <div className="grid grid-cols-2 gap-3">
            {[
              { id: 'professional', name: currentContent.professional, icon: 'üëî' },
              { id: 'casual', name: currentContent.casual, icon: 'üòä' },
              { id: 'confident', name: currentContent.confident, icon: 'üí™' },
              { id: 'friendly', name: currentContent.friendly, icon: 'ü§ù' }
            ].map((style) => (
              <button
                key={style.id}
                type="button"
                onClick={() => handleInputChange('pitchStyle', style.id)}
                className={`p-3 rounded-lg border-2 transition-all duration-200 flex flex-col items-center space-y-2 ${
                  formData.pitchStyle === style.id
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300 bg-white text-gray-700'
                }`}
              >
                <span className="text-xl">{style.icon}</span>
                <span className="text-xs font-medium">{style.name}</span>
              </button>
            ))}
          </div>
        </div>
      </div>

      <div className="border-t pt-8">
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-4">
            <Sparkles className="h-6 w-6 text-purple-600" />
            <h3 className="text-lg font-semibold text-gray-900">
              {currentContent.getAiHelp}
            </h3>
          </div>
          <p className="text-gray-600 mb-4">
            {currentContent.aiPrompt}
          </p>
          <button
            onClick={generateWithAI}
            disabled={aiLoading}
            className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {aiLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>{currentContent.aiHelping}</span>
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4" />
                <span>{currentContent.getAiHelp}</span>
              </>
            )}
          </button>
          
          {/* AI Error Message */}
          {aiError && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-700 text-sm">{aiError}</p>
            </div>
          )}
        </div>
      </div>

      {/* Tips section */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          {currentContent.tips.title}
        </h3>
        <ul className="space-y-2 text-sm text-gray-600">
          <li>‚Ä¢ {currentContent.tips.tip1}</li>
          <li>‚Ä¢ {currentContent.tips.tip2}</li>
          <li>‚Ä¢ {currentContent.tips.tip3}</li>
          <li>‚Ä¢ {currentContent.tips.tip4}</li>
        </ul>
      </div>
        </>
      )}
    </motion.div>
  );

  const renderStep3 = () => {
    console.log('üé¨ renderStep3 √ßaƒüƒ±rƒ±ldƒ±');
    console.log('üìù generatedPitch:', generatedPitch);
    console.log('üî¢ currentStep:', currentStep);
    
    return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="space-y-6"
    >
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">
          {currentContent.preview}
        </h2>
        
        <div className="flex justify-center items-center space-x-4 mb-6">
          <button
            onClick={speakPitch}
            className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-colors ${
              isPlaying 
                ? 'bg-red-600 hover:bg-red-700 text-white' 
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
          >
            {isPlaying ? (
              <>
                <Pause className="h-5 w-5" />
                <span>{currentContent.stopPitch}</span>
              </>
            ) : (
              <>
                <Play className="h-5 w-5" />
                <span>{currentContent.playPitch}</span>
              </>
            )}
          </button>
          
          <div className="flex items-center space-x-2 text-gray-600">
            <Clock className="h-4 w-4" />
            <span className="text-sm">
              {currentContent.speechTimer}: {speechTime}s
            </span>
            {speechTime > 0 && (
              <span className={`text-xs px-2 py-1 rounded-full ${
                speechTime <= 30 ? 'bg-green-100 text-green-800' : 
                speechTime <= 35 ? 'bg-yellow-100 text-yellow-800' :
                'bg-red-100 text-red-800'
              }`}>
                {speechTime <= 30 ? '‚úì Perfect' : speechTime <= 35 ? '‚ö† Close' : '‚úó Too long'}
              </span>
            )}
          </div>
        </div>
      </div>

      <div className="bg-white border border-gray-200 rounded-lg p-8 shadow-sm">
        <div className="prose max-w-none">
          <div 
            className="whitespace-pre-wrap text-gray-800 leading-relaxed text-lg"
            style={{ fontFamily: 'Times New Roman, serif' }}
          >
            {generatedPitch}
          </div>
        </div>
      </div>

      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
        <p className="text-sm text-blue-800">
          {siteLanguage === 'azerbaijani' 
            ? 'üí° M…ôsl…ôh…ôt: G√ºzg√º qar≈üƒ±sƒ±nda t…ôkrarlayƒ±n v…ô √∂z√ºn…ôg√ºv…ônli danƒ±≈üƒ±n!'
            : siteLanguage === 'english'
            ? 'üí° Tip: Practice in front of a mirror and speak with confidence!'
            : 'üí° –°–æ–≤–µ—Ç: –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ!'
          }
        </p>
      </div>
    </motion.div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-blue-600 text-white p-6">
            <div className="flex items-center justify-between">
              <button
                onClick={() => {
                  if (currentStep === 1) {
                    onBack(); // Go back to dashboard
                  } else {
                    setCurrentStep(currentStep - 1); // Go to previous step
                  }
                }}
                className="flex items-center text-white hover:text-gray-200 transition-colors"
              >
                <ChevronLeft className="h-5 w-5 mr-2" />
                <span>{currentContent.previous}</span>
              </button>
              <div className="flex-1 text-center">
                <h1 className="text-2xl font-bold text-white">
                  {currentContent.title}
                </h1>
              </div>
              <div className="w-24"></div> {/* Spacer for centering */}
            </div>

            {/* Progress Steps */}
            <div className="flex justify-center mt-6">
              <div className="flex items-center space-x-4">
                {[1, 2].map((step) => (
                  <div key={step} className="flex items-center">
                    <div
                      className={`w-12 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                        step <= currentStep
                          ? 'bg-white text-green-600'
                          : 'bg-white/20 text-white/60'
                      }`}
                    >
                      {step}
                    </div>
                    {step < 2 && (
                      <div
                        className={`w-12 h-1 mx-2 transition-colors ${
                          step < currentStep ? 'bg-white' : 'bg-white/20'
                        }`}
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-center mt-2">
              <div className="flex space-x-8 text-sm">
                {currentContent.steps.map((stepName, index) => (
                  <span
                    key={index}
                    className={`transition-opacity ${
                      index + 1 <= currentStep ? 'opacity-100' : 'opacity-60'
                    }`}
                  >
                    {stepName}
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="p-8">
            <AnimatePresence mode="wait">
              {currentStep === 1 && renderStep2()}
              {currentStep === 2 && renderStep3()}
            </AnimatePresence>
          </div>

          {/* Navigation */}
          {currentStep === 2 && (
            <div className="border-t bg-gray-50 px-8 py-4 flex justify-between">
              <button
                onClick={() => setCurrentStep(currentStep - 1)}
                className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                <ChevronLeft className="h-4 w-4" />
                <span>{currentContent.previous}</span>
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}