'use client';

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, Search, Target, Briefcase, MapPin, Clock, DollarSign, Users, Star } from 'lucide-react';
import { useSiteLanguage } from '@/contexts/SiteLanguageContext';

interface CV {
  id: number;
  title: string;
  data?: {
    personalInfo: {
      firstName: string;
      lastName: string;
      fullName: string;
      email: string;
      phone: string;
      address: string;
      jobTitle?: string;
      position?: string;
      profession?: string;
    };
    professionalSummary: string;
    workExperience: Array<{
      jobTitle: string;
      company: string;
      duration: string;
      description: string;
    }>;
    education: Array<{
      degree: string;
      institution: string;
      year: string;
    }>;
    skills: string[];
  };
}

interface JobMatch {
  id: string;
  title: string;
  company: string;
  location: string;
  type: string;
  salary: string;
  matchPercentage: number;
  description: string;
  requirements: string[];
  benefits: string[];
  improvementAreas?: string[]; // AI analysis - areas needing improvement
}

interface JobMatchFormProps {
  onBack: () => void;
}

export default function JobMatchForm({ onBack }: JobMatchFormProps) {
  const { siteLanguage } = useSiteLanguage();
  
  // üîç DEBUG: Monitor siteLanguage changes
  useEffect(() => {
    console.log('üîÑ JobMatchForm: siteLanguage d…ôyi≈üdi:', siteLanguage);
  }, [siteLanguage]);
  
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedCV, setSelectedCV] = useState<CV | null>(null);
  const [cvs, setCvs] = useState<CV[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const [jobMatches, setJobMatches] = useState<JobMatch[]>([]);
  const [searchError, setSearchError] = useState('');
  
  // Analysis language - independent from site language
  const [analysisLanguage, setAnalysisLanguage] = useState<'az' | 'en' | 'ru'>('az');
  
  // Form data
  const [formData, setFormData] = useState({
    jobTitle: '',
    location: '',
    jobType: 'full-time', // full-time, part-time, contract, remote
    salaryRange: '',
    experienceLevel: 'mid', // entry, mid, senior
    industryPreference: '',
    additionalFilters: ''
  });

  const content = {
    azerbaijani: {
      title: 'ƒ∞≈ü Uyƒüunluƒüu Analizi',
      steps: ['CV Se√ßimi', 'Axtarƒ±≈ü Parametrl…ôri', 'Uyƒüun ƒ∞≈ül…ôr'],
      selectCv: 'CV Se√ßin',
      noCvs: 'He√ß bir CV tapƒ±lmadƒ±',
      loadingCvs: 'CV-l…ôr y√ºkl…ônir...',
      searchParams: 'Axtarƒ±≈ü Parametrl…ôri',
      jobTitle: 'ƒ∞≈ü adƒ±/sah…ô',
      location: 'M…ôkan',
      jobType: 'ƒ∞≈ü n√∂v√º',
      salaryRange: 'Maa≈ü aralƒ±ƒüƒ±',
      experienceLevel: 'T…ôcr√ºb…ô s…ôviyy…ôsi',
      industryPreference: 'S…ônaye se√ßimi',
      additionalFilters: '∆èlav…ô filtrl…ôr',
      fullTime: 'Tam vaxt',
      partTime: 'Part-time',
      contract: 'M√ºqavil…ô',
      remote: 'Uzaqdan',
      entry: 'Giri≈ü s…ôviyy…ôsi',
      mid: 'Orta s…ôviyy…ô',
      senior: 'Senior s…ôviyy…ô',
      searchJobs: 'ƒ∞≈ü Axtarƒ±≈üƒ±na Ba≈üla',
      searching: 'Axtarƒ±≈ü davam edir...',
      matchResults: 'Uyƒüunluq N…ôtic…ôl…ôri',
      matchPercentage: 'Uyƒüunluq faizi',
      jobDetails: 'ƒ∞≈ü t…ôf…ôrr√ºatlarƒ±',
      requirements: 'T…ôl…ôbl…ôr',
      benefits: 'M√ºzayid…ôl…ôr',
      applyNow: 'ƒ∞ndi m√ºraci…ôt et',
      next: 'N√∂vb…ôti',
      previous: '∆èvv…ôlki',
      optionalNote: '* Bu sah…ôl…ôr m…ôcburi deyil, lakin doldurulmasƒ± axtarƒ±≈ü n…ôtic…ôl…ôrini yax≈üƒ±la≈üdƒ±racaq.',
      aiAnalysis: 'AI sizin CV-nizi analiz ed…ôr…ôk …ôn uyƒüun i≈ü imkanlarƒ±nƒ± tapacaq v…ô uyƒüunluq faizini g√∂st…ôr…ôc…ôk.',
      analysisLanguageLabel: 'Analiz Dili',
      analysisLanguageHint: 'AI cavablarƒ± hansƒ± dild…ô olsun?'
    },
    english: {
      title: 'Job Match Analysis',
      steps: ['CV Selection', 'Search Parameters', 'Matching Jobs'],
      selectCv: 'Select CV',
      noCvs: 'No CVs found',
      loadingCvs: 'Loading CVs...',
      searchParams: 'Search Parameters',
      jobTitle: 'Job title/field',
      location: 'Location',
      jobType: 'Job type',
      salaryRange: 'Salary range',
      experienceLevel: 'Experience level',
      industryPreference: 'Industry preference',
      additionalFilters: 'Additional filters',
      fullTime: 'Full-time',
      partTime: 'Part-time',
      contract: 'Contract',
      remote: 'Remote',
      entry: 'Entry level',
      mid: 'Mid level',
      senior: 'Senior level',
      searchJobs: 'Start Job Search',
      searching: 'Searching...',
      matchResults: 'Match Results',
      matchPercentage: 'Match percentage',
      jobDetails: 'Job details',
      requirements: 'Requirements',
      benefits: 'Benefits',
      applyNow: 'Apply now',
      next: 'Next',
      previous: 'Previous',
      optionalNote: '* These fields are optional, but filling them will improve search results.',
      aiAnalysis: 'AI will analyze your CV to find the most suitable job opportunities and show match percentages.',
      analysisLanguageLabel: 'Analysis Language',
      analysisLanguageHint: 'In which language should AI responses be?'
    },
    russian: {
      title: '–ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–π',
      steps: ['–í—ã–±–æ—Ä CV', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', '–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏'],
      selectCv: '–í—ã–±–µ—Ä–∏—Ç–µ CV',
      noCvs: 'CV –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      loadingCvs: '–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è CV...',
      searchParams: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
      jobTitle: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/—Å—Ñ–µ—Ä–∞',
      location: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      jobType: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã',
      salaryRange: '–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã',
      experienceLevel: '–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞',
      industryPreference: '–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –æ—Ç—Ä–∞—Å–ª–∏',
      additionalFilters: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã',
      fullTime: '–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å',
      partTime: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
      contract: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
      remote: '–£–¥–∞–ª–µ–Ω–Ω–æ',
      entry: '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
      mid: '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å',
      senior: '–°—Ç–∞—Ä—à–∏–π —É—Ä–æ–≤–µ–Ω—å',
      searchJobs: '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã',
      searching: '–ü–æ–∏—Å–∫...',
      matchResults: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
      matchPercentage: '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
      jobDetails: '–î–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏',
      requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è',
      benefits: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
      applyNow: '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
      next: '–î–∞–ª–µ–µ',
      previous: '–ù–∞–∑–∞–¥',
      optionalNote: '* –≠—Ç–∏ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –∏—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.',
      aiAnalysis: '–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ CV, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.',
      analysisLanguageLabel: '–Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞',
      analysisLanguageHint: '–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–≤–µ—Ç—ã –ò–ò?'
    }
  };

  const currentContent = content[siteLanguage] || content.azerbaijani;

  // Helper function to get full name
  const getFullName = (personalInfo: any) => {
    if (!personalInfo) return '';
    
    // Try fullName first
    if (personalInfo.fullName && personalInfo.fullName.trim()) {
      return personalInfo.fullName.trim();
    }
    
    // Fallback to firstName + lastName
    const firstName = personalInfo.firstName || '';
    const lastName = personalInfo.lastName || '';
    return `${firstName} ${lastName}`.trim();
  };

  // Fetch CVs on component mount
  useEffect(() => {
    fetchCVs();
  }, []);

  const fetchCVs = async () => {
    setLoading(true);
    try {
      console.log('üîç Job Match: CV-l…ôri y√ºkl…ôyir…ôm...');
      
      // Check authentication
      const token = localStorage.getItem('accessToken');
      if (!token) {
        console.log('‚ùå Job Match: Token yoxdur, login s…ôhif…ôsin…ô y√∂nl…ôndir…ôc…ôm');
        window.location.href = '/auth/login';
        return;
      }
      
      const response = await fetch('/api/cv', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('üìä Job Match: API cavabƒ±:', response.status);
      
      if (response.status === 401) {
        console.log('‚ùå Job Match: Token k√∂hn…ôdir, login s…ôhif…ôsin…ô y√∂nl…ôndir…ôc…ôm');
        localStorage.removeItem('accessToken');
        window.location.href = '/auth/login';
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìã Job Match: CV m…ôlumatlarƒ±:', data);
        setCvs(data.cvs || []);
        console.log('‚úÖ Job Match: CV sayƒ±:', data.cvs?.length || 0);
      } else {
        console.error('‚ùå Job Match: API x…ôtasƒ±:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Job Match: X…ôta ba≈ü verdi:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const searchJobs = async () => {
    if (!selectedCV) {
      setSearchError(siteLanguage === 'azerbaijani' 
        ? 'CV se√ßilm…ôyib. ∆èvv…ôlc…ô CV se√ßin.'
        : siteLanguage === 'english'
        ? 'No CV selected. Please select a CV first.'
        : 'CV –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ CV.');
      return;
    }
    
    setSearchLoading(true);
    setSearchError('');
    
    try {
      // Get JWT token from localStorage
      const token = localStorage.getItem('token');
      
      if (!token) {
        setSearchError(siteLanguage === 'azerbaijani' 
          ? 'ƒ∞caz…ô tapƒ±lmadƒ±. Yenid…ôn daxil olun.'
          : siteLanguage === 'english'
          ? 'Authorization not found. Please log in again.'
          : '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }

      // Map site language to API language code
      const languageMap: Record<string, string> = {
        'azerbaijani': 'az',
        'english': 'en',
        'russian': 'ru'
      };
      
      // Use analysisLanguage directly instead of siteLanguage
      const apiLanguage = analysisLanguage; // Already in 'az', 'en', 'ru' format

      // üîç DEBUG: Check analysis language
      console.log('üåê Site Language:', siteLanguage);
      console.log('ÔøΩ Analysis Language (user selected):', analysisLanguage);
      console.log('üî§ API Language Code:', apiLanguage);

      // Build job description from form data with site language support
      const jobDescriptionLabels = {
        azerbaijani: {
          jobType: 'ƒ∞≈ü N√∂v√º',
          location: 'Yer',
          experienceLevel: 'T…ôcr√ºb…ô S…ôviyy…ôsi',
          salaryRange: 'Maa≈ü Aralƒ±ƒüƒ±',
          industry: 'S…ônaye',
          additionalFilters: '∆èlav…ô Filtrl…ôr',
          notSpecified: 'G√∂st…ôrilm…ôyib',
          none: 'Yoxdur'
        },
        english: {
          jobType: 'Job Type',
          location: 'Location',
          experienceLevel: 'Experience Level',
          salaryRange: 'Salary Range',
          industry: 'Industry',
          additionalFilters: 'Additional Filters',
          notSpecified: 'Not specified',
          none: 'None'
        },
        russian: {
          jobType: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã',
          location: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
          experienceLevel: '–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞',
          salaryRange: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
          industry: '–ò–Ω–¥—É—Å—Ç—Ä–∏—è',
          additionalFilters: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã',
          notSpecified: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          none: '–ù–µ—Ç'
        }
      };

      const labels = jobDescriptionLabels[siteLanguage as keyof typeof jobDescriptionLabels] || jobDescriptionLabels.azerbaijani;

      // Map form values to display text based on site language
      const jobTypeMap: Record<string, Record<string, string>> = {
        'full-time': { azerbaijani: 'Tam vaxt', english: 'Full-time', russian: '–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å' },
        'part-time': { azerbaijani: 'Yarƒ±m vaxt', english: 'Part-time', russian: '–ù–µ–ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å' },
        'contract': { azerbaijani: 'M√ºqavil…ô', english: 'Contract', russian: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç' },
        'remote': { azerbaijani: 'Uzaqdan', english: 'Remote', russian: '–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞' }
      };

      const experienceLevelMap: Record<string, Record<string, string>> = {
        'entry': { azerbaijani: 'Ba≈ülanƒüƒ±c', english: 'Entry Level', russian: '–ù–∞—á–∞–ª—å–Ω—ã–π' },
        'mid': { azerbaijani: 'Orta', english: 'Mid Level', russian: '–°—Ä–µ–¥–Ω–∏–π' },
        'senior': { azerbaijani: 'Y√ºks…ôk', english: 'Senior Level', russian: '–í—ã—Å–æ–∫–∏–π' }
      };

      const jobTypeDisplay = jobTypeMap[formData.jobType]?.[siteLanguage] || formData.jobType;
      const experienceLevelDisplay = experienceLevelMap[formData.experienceLevel]?.[siteLanguage] || formData.experienceLevel;

      const jobDescriptionText = `
${labels.jobType}: ${jobTypeDisplay}
${labels.location}: ${formData.location || labels.notSpecified}
${labels.experienceLevel}: ${experienceLevelDisplay}
${labels.salaryRange}: ${formData.salaryRange || labels.notSpecified}
${labels.industry}: ${formData.industryPreference || labels.notSpecified}
${labels.additionalFilters}: ${formData.additionalFilters || labels.none}
      `.trim();

      // üîç DEBUG: Log job description being sent
      console.log('üìù Job Description:', jobDescriptionText);

      // Call real Job Match API with site language
      console.log('üöÄ Sending API request with language:', apiLanguage);
      const response = await fetch('/api/job-match', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          cvId: selectedCV,
          jobTitle: formData.jobTitle,
          jobDescription: jobDescriptionText,
          language: apiLanguage // Pass site language to API
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'API x…ôtasƒ±');
      }

      const data = await response.json();
      
      // üîç DEBUG: Check API response
      console.log('‚úÖ API Response:', data);
      console.log('üìä Analysis data:', data.analysis);
      
      if (data.success && data.analysis) {
        // Convert API response to JobMatch format
        const jobMatch: JobMatch = {
          id: '1',
          title: formData.jobTitle,
          company: formData.industryPreference || siteLanguage === 'azerbaijani' 
            ? 'M√º…ôssis…ô m…ôlumatƒ± yoxdur' 
            : siteLanguage === 'english'
            ? 'Company information not available'
            : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
          location: formData.location || siteLanguage === 'azerbaijani' 
            ? 'M…ôkan g√∂st…ôrilm…ôyib' 
            : siteLanguage === 'english'
            ? 'Location not specified'
            : '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          type: formData.jobType,
          salary: formData.salaryRange || siteLanguage === 'azerbaijani' 
            ? 'Maa≈ü g√∂st…ôrilm…ôyib' 
            : siteLanguage === 'english'
            ? 'Salary not specified'
            : '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
          matchPercentage: data.analysis.overallScore,
          description: siteLanguage === 'azerbaijani' 
            ? 'AI t…ôr…ôfind…ôn analiz edilmi≈ü i≈ü uyƒüunluƒüu' 
            : siteLanguage === 'english'
            ? 'AI-analyzed job compatibility'
            : '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ò–ò',
          requirements: data.analysis.matchingPoints || [],
          benefits: data.analysis.recommendations || [],
          improvementAreas: data.analysis.improvementAreas || []
        };

        setJobMatches([jobMatch]);
        setCurrentStep(3);
      } else {
        throw new Error('Analiz cavabƒ± tapƒ±lmadƒ±');
      }
      
    } catch (error) {
      console.error('Error searching jobs:', error);
      setSearchError(siteLanguage === 'azerbaijani' 
        ? `Axtarƒ±≈ü zamanƒ± x…ôta ba≈ü verdi: ${error instanceof Error ? error.message : 'Nam…ôlum x…ôta'}`
        : siteLanguage === 'english'
        ? `An error occurred during search: ${error instanceof Error ? error.message : 'Unknown error'}`
        : `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setSearchLoading(false);
    }
  };

  const renderStep1 = () => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="space-y-8"
    >
      {/* Check if CVs are available */}
      {cvs.length === 0 ? (
        <div className="text-center py-12">
          <Briefcase className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 mb-4">{currentContent.noCvs}</p>
          <div className="space-y-3">
            <p className="text-sm text-gray-500">
              {siteLanguage === 'azerbaijani' 
                ? 'ƒ∞≈ü axtarƒ±≈üƒ± √º√ß√ºn …ôvv…ôlc…ô CV yaratmalƒ±sƒ±nƒ±z.'
                : siteLanguage === 'english'
                ? 'You need to create a CV first to search for jobs.'
                : '–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å CV –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.'
              }
            </p>
            <button
              onClick={() => window.location.href = '/dashboard'}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
            >
              {siteLanguage === 'azerbaijani' 
                ? 'Dashboard-a qayƒ±t'
                : siteLanguage === 'english'
                ? 'Go to Dashboard'
                : '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥'
              }
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {currentContent.searchParams}
            </h2>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-start space-x-3">
                <Target className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-blue-800">
                  {currentContent.aiAnalysis}
                </p>
              </div>
            </div>
          </div>

          <div className="grid md:grid-cols-2 gap-6">
            {/* Analysis Language Selector - NEW */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.analysisLanguageLabel}
              </label>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setAnalysisLanguage('az')}
                  className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all duration-200 ${
                    analysisLanguage === 'az'
                      ? 'border-blue-600 bg-blue-50 text-blue-700 font-semibold'
                      : 'border-gray-300 bg-white text-gray-700 hover:border-blue-400'
                  }`}
                >
                  Az…ôrbaycan
                </button>
                <button
                  onClick={() => setAnalysisLanguage('en')}
                  className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all duration-200 ${
                    analysisLanguage === 'en'
                      ? 'border-blue-600 bg-blue-50 text-blue-700 font-semibold'
                      : 'border-gray-300 bg-white text-gray-700 hover:border-blue-400'
                  }`}
                >
                  English
                </button>
                <button
                  onClick={() => setAnalysisLanguage('ru')}
                  className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all duration-200 ${
                    analysisLanguage === 'ru'
                      ? 'border-blue-600 bg-blue-50 text-blue-700 font-semibold'
                      : 'border-gray-300 bg-white text-gray-700 hover:border-blue-400'
                  }`}
                >
                  –†—É—Å—Å–∫–∏–π
                </button>
              </div>
              <p className="text-xs text-gray-500 mt-2">{currentContent.analysisLanguageHint}</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.jobTitle}
              </label>
              <input
                type="text"
                value={formData.jobTitle}
                onChange={(e) => handleInputChange('jobTitle', e.target.value)}
                placeholder="Software Developer, Designer, Manager..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.location}
              </label>
              <input
                type="text"
                value={formData.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
                placeholder="Baku, Remote, Worldwide..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.jobType}
              </label>
              <select
                value={formData.jobType}
                onChange={(e) => handleInputChange('jobType', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="full-time">{currentContent.fullTime}</option>
                <option value="part-time">{currentContent.partTime}</option>
                <option value="contract">{currentContent.contract}</option>
                <option value="remote">{currentContent.remote}</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.experienceLevel}
              </label>
              <select
                value={formData.experienceLevel}
                onChange={(e) => handleInputChange('experienceLevel', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="entry">{currentContent.entry}</option>
                <option value="mid">{currentContent.mid}</option>
                <option value="senior">{currentContent.senior}</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.salaryRange}
              </label>
              <input
                type="text"
                value={formData.salaryRange}
                onChange={(e) => handleInputChange('salaryRange', e.target.value)}
                placeholder="1000-2000 AZN, $50k-80k..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {currentContent.industryPreference}
              </label>
              <input
                type="text"
                value={formData.industryPreference}
                onChange={(e) => handleInputChange('industryPreference', e.target.value)}
                placeholder="Technology, Finance, Healthcare..."
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {currentContent.additionalFilters}
            </label>
            <textarea
              value={formData.additionalFilters}
              onChange={(e) => handleInputChange('additionalFilters', e.target.value)}
              rows={3}
              placeholder="Remote work required, specific technologies, company size..."
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            />
          </div>

          <div className="border-t pt-8">
            <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6">
              <div className="flex items-center space-x-3 mb-4">
                <Search className="h-6 w-6 text-green-600" />
                <h3 className="text-lg font-semibold text-gray-900">
                  {currentContent.searchJobs}
                </h3>
              </div>
              <p className="text-gray-600 mb-4">
                {currentContent.aiAnalysis}
              </p>
              <button
                onClick={searchJobs}
                disabled={searchLoading}
                className="bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-lg hover:from-green-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
              >
                {searchLoading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    <span>{currentContent.searching}</span>
                  </>
                ) : (
                  <>
                    <Search className="h-4 w-4" />
                    <span>{currentContent.searchJobs}</span>
                  </>
                )}
              </button>
              
              {/* Search Error Message */}
              {searchError && (
                <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-red-700 text-sm">{searchError}</p>
                </div>
              )}
            </div>
          </div>

          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
            <p className="text-sm text-gray-600">
              {currentContent.optionalNote}
            </p>
          </div>
        </>
      )}
    </motion.div>
  );

  const renderStep2 = () => (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="space-y-6"
    >
      <div className="text-center mb-8">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">
          {currentContent.matchResults}
        </h2>
        <p className="text-gray-600">
          {siteLanguage === 'azerbaijani' 
            ? `${jobMatches.length} uyƒüun i≈ü tapƒ±ldƒ±`
            : siteLanguage === 'english'
            ? `Found ${jobMatches.length} matching jobs`
            : `–ù–∞–π–¥–µ–Ω–æ ${jobMatches.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π`
          }
        </p>
      </div>

      <div className="space-y-6">
        {jobMatches.map((job) => (
          <div
            key={job.id}
            className="bg-white border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow"
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  {job.title}
                </h3>
                <div className="flex items-center space-x-4 text-sm text-gray-600">
                  <div className="flex items-center space-x-1">
                    <Briefcase className="h-4 w-4" />
                    <span>{job.company}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <MapPin className="h-4 w-4" />
                    <span>{job.location}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Clock className="h-4 w-4" />
                    <span>{job.type}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <DollarSign className="h-4 w-4" />
                    <span>{job.salary}</span>
                  </div>
                </div>
              </div>
              <div className="flex flex-col items-end space-y-2">
                <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                  job.matchPercentage >= 90 ? 'bg-green-100 text-green-800' :
                  job.matchPercentage >= 75 ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {job.matchPercentage}% {currentContent.matchPercentage}
                </div>
                <div className="flex items-center space-x-1">
                  {[...Array(5)].map((_, i) => (
                    <Star
                      key={i}
                      className={`h-4 w-4 ${
                        i < Math.floor(job.matchPercentage / 20)
                          ? 'text-yellow-400 fill-current'
                          : 'text-gray-300'
                      }`}
                    />
                  ))}
                </div>
              </div>
            </div>

            <p className="text-gray-700 mb-4 line-clamp-2">
              {job.description}
            </p>

            <div className="grid md:grid-cols-3 gap-4 mb-4">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">
                  {siteLanguage === 'azerbaijani' 
                    ? 'Uyƒüun M…ôqamlar' 
                    : siteLanguage === 'english'
                    ? 'Matching Points'
                    : '–°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã'
                  }
                </h4>
                <div className="flex flex-wrap gap-2">
                  {job.requirements.map((req, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-md"
                    >
                      {req}
                    </span>
                  ))}
                </div>
              </div>
              
              {job.improvementAreas && job.improvementAreas.length > 0 && (
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">
                    {siteLanguage === 'azerbaijani' 
                      ? 'ƒ∞nki≈üaf Sah…ôl…ôri' 
                      : siteLanguage === 'english'
                      ? 'Improvement Areas'
                      : '–û–±–ª–∞—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è'
                    }
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {job.improvementAreas.map((area, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-orange-100 text-orange-800 text-sm rounded-md"
                      >
                        {area}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              
              <div>
                <h4 className="font-medium text-gray-900 mb-2">
                  {siteLanguage === 'azerbaijani' 
                    ? 'T√∂vsiy…ôl…ôr' 
                    : siteLanguage === 'english'
                    ? 'Recommendations'
                    : '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
                  }
                </h4>
                <div className="flex flex-wrap gap-2">
                  {job.benefits.map((benefit, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-green-100 text-green-800 text-sm rounded-md"
                    >
                      {benefit}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            <div className="flex justify-end">
              <button className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                {currentContent.applyNow}
              </button>
            </div>
          </div>
        ))}
      </div>
    </motion.div>
  );

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button
                  onClick={onBack}
                  className="p-2 hover:bg-white/20 rounded-lg transition-colors"
                >
                  <ChevronLeft className="h-5 w-5" />
                </button>
                <div>
                  <h1 className="text-2xl font-bold text-center text-white">
                    {currentContent.title}
                  </h1>
                </div>
              </div>
            </div>

            {/* Progress Steps */}
            <div className="flex justify-center mt-6">
              <div className="flex items-center space-x-4">
                {[1, 2].map((step) => (
                  <div key={step} className="flex items-center">
                    <div
                      className={`w-12 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                        step <= currentStep
                          ? 'bg-white text-green-600'
                          : 'bg-white/20 text-white/60'
                      }`}
                    >
                      {step}
                    </div>
                    {step < 2 && (
                      <div
                        className={`w-16 h-1 mx-2 transition-colors ${
                          step < currentStep ? 'bg-white' : 'bg-white/20'
                        }`}
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-center mt-2">
              <div className="flex space-x-8 text-sm">
                {currentContent.steps.map((stepName, index) => (
                  <span
                    key={index}
                    className={`transition-opacity ${
                      index + 1 <= currentStep ? 'opacity-100' : 'opacity-60'
                    }`}
                  >
                    {stepName}
                  </span>
                ))}
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="p-8">
            <AnimatePresence mode="wait">
              {currentStep === 1 && renderStep1()}
              {currentStep === 2 && renderStep2()}
            </AnimatePresence>
          </div>

          {/* Navigation */}
          {currentStep === 2 && (
            <div className="border-t bg-gray-50 px-8 py-4 flex justify-between">
              <button
                onClick={() => setCurrentStep(currentStep - 1)}
                className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                <ChevronLeft className="h-4 w-4" />
                <span>{currentContent.previous}</span>
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}