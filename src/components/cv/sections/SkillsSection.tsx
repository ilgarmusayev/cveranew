'use client';

import { useState } from 'react';
import { getLabel } from '@/lib/cvLanguage';
import { useNotification } from '@/components/ui/Toast';
import { apiClient } from '@/lib/api-client';
import { useSiteLanguage } from '@/contexts/SiteLanguageContext';

interface Skill {
  id: string;
  name: string;
  level?: string;
  type?: 'hard' | 'soft'; // Add skill type
  description?: string; // AI-generated description
}

interface SkillsSectionProps {
  data: Skill[];
  onChange: (data: Skill[]) => void;
  userTier?: string; // User tier for AI features
  cvData?: any; // Full CV data for AI analysis
  cvId?: string; // CV ID for AI suggestions
  cvLanguage?: 'english' | 'azerbaijani' | 'russian';
}

interface SkillSuggestion {
  name: string;
  reason: string;
  category?: string; // Add optional category property
  relevanceScore?: number; // Relevance score (1-10)
  marketDemand?: string; // Market demand level
  implementation?: string; // How to develop this skill
  timeToMaster?: string; // Time needed to master
  industryTrend?: string; // Industry trend information
}

export default function SkillsSection({ data, onChange, userTier = 'Free', cvData, cvId, cvLanguage = 'azerbaijani' }: SkillsSectionProps) {
  const { siteLanguage } = useSiteLanguage();
  
  // Skills labels
  const labels = {
    azerbaijani: {
      title: 'Bacarƒ±qlar',
      add: '+ ∆èlav…ô edin',
      addShort: '+',
      newSkill: 'Yeni bacarƒ±q',
      skillName: 'Bacarƒ±q adƒ±',
      moveUp: 'Yuxarƒ±',
      moveDown: 'A≈üaƒüƒ±',
      close: 'Baƒülayƒ±n',
      edit: 'Redakt…ô edin',
      delete: 'Silin',
      aiSuggest: 'AI T√∂vsiy…ôl…ôri',
      level: 'S…ôviyy…ô',
      beginner: 'Ba≈ülanƒüƒ±c',
      intermediate: 'Orta',
      advanced: 'ƒ∞r…ôlil…ômi≈ü',
      expert: 'M√ºt…ôx…ôssis',
      type: 'N√∂v',
      hardSkill: 'Texniki bacarƒ±q',
      softSkill: '≈û…ôxsi bacarƒ±q',
      generateDescription: 'AI t…ôsvir yaradƒ±n',
      noSkills: 'H…ôl…ô he√ß bir bacarƒ±q …ôlav…ô etm…ômisiniz',
      addFirst: 'ƒ∞lk bacarƒ±ƒüƒ±nƒ±zƒ± …ôlav…ô edin',
      addAnother: '+ Ba≈üqa bacarƒ±q …ôlav…ô edin',
      cvIdRequired: 'AI t√∂vsiy…ôl…ôri almaq √º√ß√ºn CV ID lazƒ±mdƒ±r',
      accessDenied: 'Giri≈ü icaz…ôsi yoxdur. Yenid…ôn giri≈ü edin.',
      aiError: 'AI t√∂vsiy…ôl…ôri alƒ±nark…ôn x…ôta ba≈ü verdi',
      upgradeRequired: 'AI x√ºsusiyy…ôtl…ôrind…ôn istifad…ô etm…ôk √º√ß√ºn abun…ôliyi y√ºkseldin',
      noSuggestions: 'He√ß bir t√∂vsiy…ô tapƒ±lmadƒ±',
      hardSkillPlaceholder: 'JavaScript, Python, Photoshop, AutoCAD, v…ô s.',
      softSkillPlaceholder: 'Liderlik, Komanda i≈üi, Komunikasiya, v…ô s.',
      upgradeForAI: 'AI x√ºsusiyy…ôtl…ôrind…ôn istifad…ô etm…ôk √º√ß√ºn abun…ôliyi y√ºkseldin',
      noDefaultReason: 'T√∂vsiy…ô olunmu≈ü bacarƒ±q',
      aiSuggestionsSuccess: 'AI t√∂vsiy…ôl…ôri uƒüurla alƒ±ndƒ±',
      skillExists: 'Bu bacarƒ±q artƒ±q m√∂vcuddur!',
      descriptionGenerated: 'AI t…ôsviri uƒüurla yaradƒ±ldƒ±!',
      cvIdRequiredDesc: 'AI t…ôsvir yaratmaq √º√ß√ºn CV ID lazƒ±mdƒ±r',
      missingInfo: 'M…ôlumat √ßatƒ±≈ümƒ±r',
      authError: 'Autentifikasiya x…ôtasƒ±',
      addExperienceFirst: 'AI t√∂vsiy…ôl…ôri √º√ß√ºn …ôvv…ôlc…ô t…ôcr√ºb…ô v…ô ya t…ôhsil m…ôlumatlarƒ±nƒ± doldurun',
      recommendedBasedOnCV: 'CV profiliniz…ô …ôsas…ôn t√∂vsiy…ô edil…ôn',
      aiSuggestionsGenerated: 'AI bacarƒ±q t…ôklifi hazƒ±rlandƒ±! Se√ßib …ôlav…ô edin.',
      skillAddedToCV: 'bacarƒ±ƒüƒ± CV-niz…ô …ôlav…ô edildi! üéâ',
      skillNameRequired: 'AI t…ôsvir yaratmaq √º√ß√ºn bacarƒ±q adƒ± lazƒ±mdƒ±r',
      aiAccessDenied: 'Giri≈ü icaz…ôsi yoxdur. Yenid…ôn giri≈ü edin.',
      aiAuthError: 'Autentifikasiya x…ôtasƒ±',
      aiDescriptionSuccessProfessional: 'Pe≈ü…ôkar s…ôviyy…ôd…ô hazƒ±rlandƒ± v…ô ATS √º√ß√ºn optimalla≈üdƒ±rƒ±ldƒ±.',
      aiDescriptionSuccessExecutive: 'Executive-level s…ôviyy…ôd…ô hazƒ±rlandƒ± v…ô ATS √º√ß√ºn optimalla≈üdƒ±rƒ±ldƒ±.',
      aiSkillDescGenerated: 'AI Bacarƒ±q T…ôsviri Yaradƒ±ldƒ±! üéâ',
      aiGenerationError: 'AI bacarƒ±q t…ôsviri yaradark…ôn x…ôta ba≈ü verdi. Yenid…ôn c…ôhd edin.',
      aiErrorTitle: 'AI X…ôtasƒ±',
      allSuggestedSkillsExist: 'B√ºt√ºn t…ôklif edil…ôn bacarƒ±qlar artƒ±q m√∂vcuddur.',
      aiNotSuggestingSkills: 'AI hazƒ±rda …ôlav…ô bacarƒ±q t…ôklif etmir.'
    },
    english: {
      title: 'Skills',
      add: '+ Add',
      addShort: '+',
      newSkill: 'New skill',
      skillName: 'Skill name',
      moveUp: 'Move up',
      moveDown: 'Move down',
      close: 'Close',
      edit: 'Edit',
      delete: 'Delete',
      aiSuggest: 'AI Suggestions',
      level: 'Level',
      beginner: 'Beginner',
      intermediate: 'Intermediate',
      advanced: 'Advanced',
      expert: 'Expert',
      type: 'Type',
      hardSkill: 'Hard Skill',
      softSkill: 'Soft Skill',
      generateDescription: 'Generate AI Description',
      noSkills: 'No skills added yet',
      addFirst: 'Add your first skill',
      addAnother: '+ Add another skill',
      cvIdRequired: 'CV ID is required for AI suggestions',
      accessDenied: 'Access denied. Please log in again.',
      aiError: 'Error occurred while getting AI suggestions',
      upgradeRequired: 'Upgrade subscription to use AI features',
      noSuggestions: 'No suggestions found',
      hardSkillPlaceholder: 'JavaScript, Python, Photoshop, AutoCAD, etc.',
      softSkillPlaceholder: 'Leadership, Teamwork, Communication, etc.',
      upgradeForAI: 'Upgrade subscription to use AI features',
      noDefaultReason: 'Recommended skill',
      aiSuggestionsSuccess: 'AI suggestions retrieved successfully',
      skillExists: 'This skill already exists!',
      descriptionGenerated: 'AI description generated successfully!',
      cvIdRequiredDesc: 'CV ID is required to generate AI description',
      missingInfo: 'Missing Information',
      authError: 'Authentication Error',
      addExperienceFirst: 'Please first add work experience or education information for AI suggestions',
      recommendedBasedOnCV: 'Recommended based on your CV profile',
      aiSuggestionsGenerated: 'AI skill suggestions generated! Select and add them.',
      skillAddedToCV: 'skill added to your CV! üéâ',
      skillNameRequired: 'Skill name is required to generate AI description',
      aiAccessDenied: 'Access denied. Please login again.',
      aiAuthError: 'Authentication error',
      aiDescriptionSuccessProfessional: 'Created professional-quality and optimized for ATS.',
      aiDescriptionSuccessExecutive: 'Created executive-level quality and optimized for ATS.',
      aiSkillDescGenerated: 'AI Skill Description Generated! üéâ',
      aiGenerationError: 'An error occurred while generating AI skill description. Please try again.',
      aiErrorTitle: 'AI Error',
      allSuggestedSkillsExist: 'All suggested skills already exist in your CV.',
      aiNotSuggestingSkills: 'AI is not suggesting new skills. All suggested skills are already in your CV.'
    },
    
    russian: {
      title: '–ù–∞–≤—ã–∫–∏',
      add: '+ –î–æ–±–∞–≤–∏—Ç—å',
      addShort: '+',
      newSkill: '–ù–æ–≤—ã–π –Ω–∞–≤—ã–∫',
      skillName: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞',
      moveUp: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö',
      moveDown: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑',
      close: '–ó–∞–∫—Ä—ã—Ç—å',
      edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
      delete: '–£–¥–∞–ª–∏—Ç—å',
      aiSuggest: '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      level: '–£—Ä–æ–≤–µ–Ω—å',
      beginner: '–ù–∞—á–∞–ª—å–Ω—ã–π',
      intermediate: '–°—Ä–µ–¥–Ω–∏–π',
      advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
      expert: '–≠–∫—Å–ø–µ—Ä—Ç',
      type: '–¢–∏–ø',
      hardSkill: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–≤—ã–∫',
      softSkill: '–õ–∏—á–Ω—ã–π –Ω–∞–≤—ã–∫',
      generateDescription: '–°–æ–∑–¥–∞—Ç—å –ò–ò –æ–ø–∏—Å–∞–Ω–∏–µ',
      noSkills: '–ù–∞–≤—ã–∫–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
      addFirst: '–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫',
      addAnother: '+ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –Ω–∞–≤—ã–∫',
      cvIdRequired: '–î–ª—è –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è ID —Ä–µ–∑—é–º–µ',
      accessDenied: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.',
      aiError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      upgradeRequired: '–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π',
      noSuggestions: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
      hardSkillPlaceholder: 'JavaScript, Python, Photoshop, AutoCAD –∏ —Ç.–¥.',
      softSkillPlaceholder: '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ, –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —Ç.–¥.',
      upgradeForAI: '–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π',
      noDefaultReason: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –Ω–∞–≤—ã–∫',
      aiSuggestionsSuccess: '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã',
      skillExists: '–≠—Ç–æ—Ç –Ω–∞–≤—ã–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
      descriptionGenerated: '–ò–ò –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
      cvIdRequiredDesc: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è ID —Ä–µ–∑—é–º–µ',
      missingInfo: '–ù–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      authError: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      addExperienceFirst: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
      recommendedBasedOnCV: '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ–∑—é–º–µ',
      aiSuggestionsGenerated: '–ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–∑–¥–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö.',
      skillAddedToCV: '–Ω–∞–≤—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–µ —Ä–µ–∑—é–º–µ! üéâ',
      skillNameRequired: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–ò –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞',
      aiAccessDenied: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.',
      aiAuthError: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      aiDescriptionSuccessProfessional: '–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ATS.',
      aiDescriptionSuccessExecutive: '–°–æ–∑–¥–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ATS.',
      aiSkillDescGenerated: '–°–æ–∑–¥–∞–Ω–æ AI –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞! üéâ',
      aiGenerationError: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      aiErrorTitle: '–û—à–∏–±–∫–∞ AI',
      allSuggestedSkillsExist: '–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –≤–∞—à–µ–º —Ä–µ–∑—é–º–µ.',
      aiNotSuggestingSkills: '–ò–ò –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏. –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —É–∂–µ –≤ –≤–∞—à–µ–º —Ä–µ–∑—é–º–µ.'
    }
  };

  const content = labels[siteLanguage];
  
  const [expandedId, setExpandedId] = useState<string | null>(null);
  const [aiSuggesting, setAiSuggesting] = useState(false);
  const [aiGeneratingSkill, setAiGeneratingSkill] = useState<string | null>(null); // Track which skill is generating AI description
  const [suggestions, setSuggestions] = useState<SkillSuggestion[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const { showSuccess, showError, showWarning, showInfo } = useNotification();

  // AI is available for all users to see, but only works for premium users
  const canUseAI = ['premium', 'populyar', 'medium', 'pro'].includes(userTier?.toLowerCase());

  const addSkill = () => {
    const newSkill: Skill = {
      id: Date.now().toString(),
      name: '',
      type: 'hard' // Default to hard skill
    };
    onChange([newSkill, ...data]);
    setExpandedId(newSkill.id);
  };

  const updateSkill = (id: string, field: keyof Skill, value: string) => {
    const updated = data.map(skill => 
      skill.id === id ? { ...skill, [field]: value } : skill
    );
    onChange(updated);
  };

  const removeSkill = (id: string) => {
    onChange(data.filter(skill => skill.id !== id));
  };

  const moveSkill = (id: string, direction: 'up' | 'down') => {
    const index = data.findIndex(skill => skill.id === id);
    if (direction === 'up' && index > 0) {
      const updated = [...data];
      [updated[index], updated[index - 1]] = [updated[index - 1], updated[index]];
      onChange(updated);
    } else if (direction === 'down' && index < data.length - 1) {
      const updated = [...data];
      [updated[index], updated[index + 1]] = [updated[index + 1], updated[index]];
      onChange(updated);
    }
  };

  const getSuggestionsFromAI = async () => {
    // Check if user is on free plan - show upgrade modal instead of alert
    if (!canUseAI) {
      setShowUpgradeModal(true);
      return;
    }

    if (!cvId) {
      showWarning(content.cvIdRequired);
      return;
    }

    // Check if user has enough data for meaningful suggestions
    const hasExperience = cvData?.experience && cvData.experience.length > 0;
    const hasEducation = cvData?.education && cvData.education.length > 0;
    const hasPersonalInfo = cvData?.personalInfo && cvData.personalInfo.fullName;

    if (!hasPersonalInfo || (!hasExperience && !hasEducation)) {
      showWarning(content.addExperienceFirst);
      return;
    }

    setAiSuggesting(true);
    setShowSuggestions(false);
    setSuggestions([]); // Clear previous suggestions
    console.log('ü§ñ Getting AI skill suggestions...');

    try {
      // Get authentication token
      const token = localStorage.getItem('accessToken') || localStorage.getItem('token') || localStorage.getItem('auth-token');

      if (!token) {
        showError(content.accessDenied);
        setAiSuggesting(false);
        return;
      }

      const response = await apiClient.post('/api/ai/suggest-skills', { 
        cvId: cvId, // Add CV ID to request
        cvData,
        // Pass SAME language as CV for same-language suggestions
        targetLanguage: cvData?.cvLanguage || 'english',
        // Add timestamp to ensure new suggestions each time
        requestId: Date.now().toString()
      });

      console.log('üîÑ Skills API Request:', {
        cvLanguage: cvData?.cvLanguage,
        targetLanguage: cvData?.cvLanguage || 'english',
        requestId: Date.now().toString()
      });

      console.log('üì° AI Skills API Response:', {
        success: response.success,
        hasData: !!response.data,
        error: response.error
      });

      if (response.success && response.data) {
        const { suggestions } = response.data;
        
        console.log('üìã Raw AI Response suggestions:', suggestions);
        console.log('üìã First suggestion example:', suggestions?.[0]);
        
        console.log('‚úÖ AI Skills Generated:', suggestions?.length || 0, 'skills');
        
        if (suggestions && suggestions.length > 0) {
          // Log skill distribution
          const hardSkills = suggestions.filter((s: any) => s.category === 'Hard');
          const softSkills = suggestions.filter((s: any) => s.category === 'Soft');
          console.log('üìä Skill Distribution - Hard:', hardSkills.length, 'Soft:', softSkills.length);
          console.log('üîç Hard Skills:', hardSkills.map((s: any) => s.name));
          console.log('üîç Soft Skills:', softSkills.map((s: any) => s.name));
          
          // Store suggested skills for user to manually choose from (avoid duplicates)
          const existingSkillNames = data.map(skill => skill.name.toLowerCase());
          const newSuggestions = suggestions
            .filter((skill: any) => !existingSkillNames.includes(skill.name.toLowerCase()))
            .map((skill: any) => ({
              name: skill.name,
              reason: skill.reason || skill.cvConnection || content.recommendedBasedOnCV,
              category: skill.category || 'Hard', // Use AI's actual category instead of hardcoding
              relevanceScore: skill.relevanceScore || 8,
              marketDemand: 'High',
              implementation: 'Add to your skillset',
              timeToMaster: '6-12 months',
              industryTrend: 'Growing',
              cvConnection: skill.cvConnection
            }));
          
          if (newSuggestions.length > 0) {
            setSuggestions(newSuggestions);
            setShowSuggestions(true);
            showSuccess(`${newSuggestions.length} ${content.aiSuggestionsGenerated}`);
          } else {
            showInfo(); // Will use default info message from notificationMessages
          }
        } else {
          showInfo(); // Will use default info message from notificationMessages
        }
      } else {
  const errorMessage = response.error;
  console.error('‚ùå AI Skills Error:', errorMessage);
  showError(errorMessage); // Will use default error message if errorMessage is undefined
      }
    } catch (error) {
      console.error('üö® AI Skills Generation Error:', error);
      console.error('üö® Error details:', {
        message: error instanceof Error ? error.message : undefined,
        stack: error instanceof Error ? error.stack : undefined
      });
      showError(); // Will use default error message from notificationMessages
    } finally {
      setAiSuggesting(false);
    }
  };

  const addSuggestedSkill = (suggestion: SkillSuggestion) => {
    // Check if skill already exists
    const existingSkill = data.find(skill =>
      skill.name.toLowerCase() === suggestion.name.toLowerCase()
    );

    if (existingSkill) {
      showWarning(content.skillExists);
      return;
    }

    // Determine skill type based on category - improved logic
    let skillType: 'hard' | 'soft' = 'hard'; // default to hard
    
    console.log('üîç Categorizing skill:', suggestion.name, 'with category:', suggestion.category);
    
    if (suggestion.category) {
      const category = suggestion.category.toLowerCase();
      console.log('üìù Processing category:', category);
      
      // Direct AI category matching ("Hard" and "Soft" from AI)
      if (category === 'soft') {
        skillType = 'soft';
        console.log('‚úÖ Matched as Soft skill (direct)');
      } else if (category === 'hard') {
        skillType = 'hard';
        console.log('‚úÖ Matched as Hard skill (direct)');
      }
      // Fallback for language-specific categories
      else if (category.includes('soft') || 
               category.includes('≈ü…ôxsi') || 
               category.includes('personal') ||
               category === 'soft skills' ||
               category === '≈ü…ôxsi bacarƒ±qlar') {
        skillType = 'soft';
        console.log('‚úÖ Matched as Soft skill (fallback)');
      }
    }
    
    // Additional check based on skill name for common soft skills
    const skillName = suggestion.name.toLowerCase();
    const commonSoftSkills = [
      'communication', 'kommunikasiya', 'ileti≈üim',
      'leadership', 'liderlik', 'r…ôhb…ôrlik', 
      'teamwork', 'team work', 'komanda i≈üi', 'takƒ±m √ßalƒ±≈ümasƒ±',
      'problem solving', 'problem h…ôlli', 'problem √ß√∂zme',
      'adaptability', 'adaptasiya', 'uyum',
      'creativity', 'yaradƒ±cƒ±lƒ±q', 'kreativite',
      'time management', 'vaxt idar…ôetm…ôsi', 'zaman y√∂netimi',
      'analytical thinking', 'analitik d√º≈ü√ºnc…ô', 'analitik d√º≈ü√ºnce',
      'critical thinking', 't…ônqidi d√º≈ü√ºnc…ô', 'ele≈ütirel d√º≈ü√ºnce',
      'negotiation', 'danƒ±≈üƒ±q', 'm√ºzakere',
      'presentation', 't…ôqdimat', 'sunum',
      'strategic thinking', 'strateji d√º≈ü√ºnc…ô'
    ];
    
    if (commonSoftSkills.some(softSkill => skillName.includes(softSkill))) {
      skillType = 'soft';
      console.log('‚úÖ Matched as Soft skill (by name)');
    }

    console.log('üéØ Final skill type:', skillType, 'for skill:', suggestion.name);

    // Add the suggested skill with proper type
    const newSkill: Skill = {
      id: `skill-${skillType}-${Date.now()}-${Math.random()}`,
      name: suggestion.name,
      level: 'Intermediate' as const,
      type: skillType as 'hard' | 'soft'
    };

    onChange([...data, newSkill]);

    // Remove the suggestion from the list
    setSuggestions(prev => prev.filter(s => s.name !== suggestion.name));

    // Show success message
    showSuccess(`"${suggestion.name}" ${content.skillAddedToCV}`);
  };

  const generateAIDescription = async (skillId: string, skillName: string, skillType?: string) => {
    // Check if user can use AI
    if (!canUseAI) {
      setShowUpgradeModal(true);
      return;
    }

    if (!cvId) {
      showError(content.cvIdRequiredDesc, content.missingInfo);
      return;
    }

    if (!skillName.trim()) {
      showWarning(content.skillNameRequired);
      return;
    }

    setAiGeneratingSkill(skillId);
    console.log('ü§ñ Generating AI description for skill:', skillName);

    try {
      // Get authentication token
      const token = localStorage.getItem('accessToken') || localStorage.getItem('token') || localStorage.getItem('auth-token');

      if (!token) {
        showError(
          siteLanguage === 'english' ? 'Access denied. Please log in again.' : siteLanguage === 'russian' ? '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.' : 'Giri≈ü icaz…ôsi yoxdur. Yenid…ôn giri≈ü edin.', 
          siteLanguage === 'english' ? 'Authentication Error' : siteLanguage === 'russian' ? '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' : 'Autentifikasiya x…ôtasƒ±'
        );
        return;
      }

      const response = await fetch('/api/generate-ai-skills', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ 
          cvId, 
          skillId, 
          skillName,
          skillType 
        }),
      });

      console.log('üì° AI Skill Description API Response:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText
      });

      const result = await response.json();
      console.log('üìã AI Skill Description Result:', result);

      if (!response.ok) {
        if (response.status === 401) {
          showError(
            content.aiAccessDenied, 
            content.aiAuthError
          );
        } else if (response.status === 403) {
          setShowUpgradeModal(true);
        } else {
          throw new Error(result.error || 'API x…ôtasƒ±');
        }
        return;
      }

      if (result.success && result.description) {
        console.log('‚úÖ AI Skill Description generated successfully:', result.description.length, 'characters');
        
        // Update the skill with the AI-generated description
        const updated = data.map(skill => 
          skill.id === skillId ? { ...skill, description: result.description } : skill
        );
        onChange(updated);

        showSuccess(
          siteLanguage === 'english' 
            ? `${userTier === 'Premium' ? 'Executive-level' : 'Professional'} quality generated and ATS optimized.`
            : siteLanguage === 'russian' 
            ? `–°–æ–∑–¥–∞–Ω–æ ${userTier === 'Premium' ? '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è' : '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è'} –∫–∞—á–µ—Å—Ç–≤–æ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è ATS.`
            : `${userTier === 'Premium' ? 'Executive-level' : 'Pe≈ü…ôkar'} s…ôviyy…ôd…ô hazƒ±rlandƒ± v…ô ATS √º√ß√ºn optimalla≈üdƒ±rƒ±ldƒ±.`,
          siteLanguage === 'english' ? 'AI Skill Description Generated! üéâ' : siteLanguage === 'russian' ? '–°–æ–∑–¥–∞–Ω–æ AI –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞! üéâ' : 'AI Bacarƒ±q T…ôsviri Yaradƒ±ldƒ±! üéâ'
        );
      } else {
        console.log('‚ùå API returned success=false or no description');
        throw new Error('AI bacarƒ±q t…ôsviri yaradƒ±la bilm…ôdi');
      }

    } catch (error) {
      console.error('üí• AI Skill Description error:', error);
      showError(
        siteLanguage === 'english' ? 'Error occurred while generating AI skill description. Please try again.' : siteLanguage === 'russian' ? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' : 'AI bacarƒ±q t…ôsviri yaradark…ôn x…ôta ba≈ü verdi. Yenid…ôn c…ôhd edin.', 
        siteLanguage === 'english' ? 'AI Error' : siteLanguage === 'russian' ? '–û—à–∏–±–∫–∞ AI' : 'AI X…ôtasƒ±'
      );
    } finally {
      setAiGeneratingSkill(null);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">
            {content.title}
          </h3>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={getSuggestionsFromAI}
            disabled={aiSuggesting}
            className={`px-3 py-2 text-sm rounded-lg font-medium transition-colors whitespace-nowrap ${
              canUseAI
                ? aiSuggesting
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600'
                : 'bg-gray-200 text-gray-500 cursor-not-allowed'
            }`}
          >
            {aiSuggesting ? (
              <div className="flex items-center space-x-1">
                <div className="animate-spin rounded-full h-3 w-3 border-b border-white"></div>
                <span className="hidden sm:inline">{siteLanguage === 'english' ? 'AI suggesting...' : siteLanguage === 'russian' ? '–ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç...' : 'AI t…ôklif edir...'}</span>
                <span className="sm:hidden">AI...</span>
              </div>
            ) : (
              <div className="flex items-center space-x-1">
                <span>ü§ñ</span>
                <span className="hidden sm:inline">{content.aiSuggest}</span>
                <span className="sm:hidden">AI</span>
                {!canUseAI && <span className="ml-1">üîí</span>}
              </div>
            )}
          </button>
          <button
            onClick={addSkill}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors whitespace-nowrap"
          >
            <span className="hidden sm:inline">
              {content.add}
            </span>
            <span className="sm:hidden">
              {content.addShort}
            </span>
          </button>
        </div>
      </div>

      {data.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
          <div className="text-gray-400 mb-4 flex justify-center">
            <svg className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
            </svg>
          </div>
          <p className="text-gray-500 mb-4">
            {content.noSkills}
          </p>
          <button
            onClick={addSkill}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            {content.addFirst}
          </button>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Hard Skills Section */}
          {data.filter(skill => skill.type === 'hard' || !skill.type).length > 0 && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <span className="text-2xl">‚öôÔ∏è</span>
                <h4 className="text-lg font-semibold text-gray-900">
                  {siteLanguage === 'english' ? 'Technical Skills' : siteLanguage === 'russian' ? '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏' : 'Texniki Bacarƒ±qlar'}
                </h4>
                <span className="text-sm text-gray-500">
                  ({data.filter(skill => skill.type === 'hard' || !skill.type).length})
                </span>
              </div>
              <div className="space-y-4">
                {data.filter(skill => skill.type === 'hard' || !skill.type).map((skill, index) => (
                  <div key={skill.id} className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-blue-500">‚öôÔ∏è</span>
                        <h4 className="font-medium text-gray-900">
                          {skill.name || (siteLanguage === 'english' ? 'New technical skill' : siteLanguage === 'russian' ? '–ù–æ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–≤—ã–∫' : 'Yeni texniki bacarƒ±q')}
                        </h4>
                      </div>
                    </div>

                    {/* Action links moved to bottom of card */}
                    <div className="flex items-center justify-between mt-4 pt-2 border-t border-gray-100">
                      {/* Move buttons */}
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => moveSkill(skill.id, 'up')}
                          disabled={index === 0}
                          className={`p-1 rounded transition-colors ${
                            index === 0
                              ? 'text-gray-300 cursor-not-allowed'
                              : 'text-gray-600 hover:text-blue-600 hover:bg-blue-50'
                          }`}
                          title={siteLanguage === 'english' ? 'Move Up' : siteLanguage === 'russian' ? '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö' : 'Yuxarƒ±'}
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                          </svg>
                        </button>
                        <button
                          onClick={() => moveSkill(skill.id, 'down')}
                          disabled={index === data.filter(s => s.type === 'hard' || !s.type).length - 1}
                          className={`p-1 rounded transition-colors ${
                            index === data.filter(s => s.type === 'hard' || !s.type).length - 1
                              ? 'text-gray-300 cursor-not-allowed'
                              : 'text-gray-600 hover:text-blue-600 hover:bg-blue-50'
                          }`}
                          title={siteLanguage === 'english' ? 'Move Down' : siteLanguage === 'russian' ? '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑' : 'A≈üaƒüƒ±'}
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </button>
                      </div>

                      {/* Edit and remove buttons */}
                      <div className="flex items-center gap-4">
                        <button
                          onClick={() => setExpandedId(expandedId === skill.id ? null : skill.id)}
                          className="text-blue-600 hover:text-blue-800 transition-colors text-sm cursor-pointer"
                        >
                          {expandedId === skill.id ? (siteLanguage === 'english' ? 'Close' : siteLanguage === 'russian' ? '–ó–∞–∫—Ä—ã—Ç—å' : 'Baƒülayƒ±n') : (siteLanguage === 'english' ? 'Edit' : siteLanguage === 'russian' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : 'Redakt…ô edin')}
                        </button>
                        <button
                          onClick={() => removeSkill(skill.id)}
                          className="text-red-600 hover:text-red-800 transition-colors text-sm cursor-pointer"
                        >
                          {siteLanguage === 'english' ? 'Delete' : siteLanguage === 'russian' ? '–£–¥–∞–ª–∏—Ç—å' : 'Silin'}
                        </button>
                      </div>
                    </div>

                    {expandedId === skill.id && (
                      <div className="space-y-4 border-t border-gray-200 pt-4">
                        <div className="grid grid-cols-1 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              {siteLanguage === 'english' ? 'Skill Name' : siteLanguage === 'russian' ? '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞' : 'Bacarƒ±q adƒ±'} <span className="text-red-500">*</span>
                            </label>
                            <input
                              type="text"
                              value={skill.name}
                              onChange={(e) => updateSkill(skill.id, 'name', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                              placeholder={content.hardSkillPlaceholder}
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              {siteLanguage === 'english' ? 'Skill Type' : siteLanguage === 'russian' ? '–¢–∏–ø –Ω–∞–≤—ã–∫–∞' : 'Bacarƒ±q n√∂v√º'}
                            </label>
                            <select
                              value={skill.type || 'hard'}
                              onChange={(e) => updateSkill(skill.id, 'type', e.target.value as 'hard' | 'soft')}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                            >
                              <option value="hard">
                                {siteLanguage === 'english' ? 'Technical Skill' : siteLanguage === 'russian' ? '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–≤—ã–∫' : 'Texniki Bacarƒ±q'}
                              </option>
                              <option value="soft">
                                {siteLanguage === 'english' ? 'Soft Skill' : siteLanguage === 'russian' ? '–õ–∏—á–Ω—ã–π –Ω–∞–≤—ã–∫' : '≈û…ôxsi Bacarƒ±q'}
                              </option>
                            </select>
                          </div>
                          
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Soft Skills Section */}
          {data.filter(skill => skill.type === 'soft').length > 0 && (
            <div>
              <div className="flex items-center gap-2 mb-4">
                <span className="text-2xl">ü§ù</span>
                <h4 className="text-lg font-semibold text-gray-900">
                  {siteLanguage === 'english' ? 'Soft Skills' : siteLanguage === 'russian' ? '–õ–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏' : '≈û…ôxsi Bacarƒ±qlar'}
                </h4>
                <span className="text-sm text-gray-500">
                  ({data.filter(skill => skill.type === 'soft').length})
                </span>
              </div>
              <div className="space-y-4">
                {data.filter(skill => skill.type === 'soft').map((skill, index) => (
                  <div key={skill.id} className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-green-500">ü§ù</span>
                        <h4 className="font-medium text-gray-900">
                          {skill.name || (siteLanguage === 'english' ? 'New soft skill' : siteLanguage === 'russian' ? '–ù–æ–≤—ã–π –ª–∏—á–Ω—ã–π –Ω–∞–≤—ã–∫' : 'Yeni ≈ü…ôxsi bacarƒ±q')}
                        </h4>
                      </div>
                    </div>

                    {/* Action links moved to bottom of card */}
                    <div className="flex items-center justify-between mt-4 pt-2 border-t border-gray-100">
                      {/* Move buttons */}
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => moveSkill(skill.id, 'up')}
                          disabled={index === 0}
                          className={`p-1 rounded transition-colors ${
                            index === 0
                              ? 'text-gray-300 cursor-not-allowed'
                              : 'text-gray-600 hover:text-blue-600 hover:bg-blue-50'
                          }`}
                          title={siteLanguage === 'english' ? 'Move Up' : siteLanguage === 'russian' ? '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö' : 'Yuxarƒ±'}
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                          </svg>
                        </button>
                        <button
                          onClick={() => moveSkill(skill.id, 'down')}
                          disabled={index === data.filter(s => s.type === 'soft').length - 1}
                          className={`p-1 rounded transition-colors ${
                            index === data.filter(s => s.type === 'soft').length - 1
                              ? 'text-gray-300 cursor-not-allowed'
                              : 'text-gray-600 hover:text-blue-600 hover:bg-blue-50'
                          }`}
                          title={siteLanguage === 'english' ? 'Move Down' : siteLanguage === 'russian' ? '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑' : 'A≈üaƒüƒ±'}
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </button>
                      </div>

                      {/* Edit and remove buttons */}
                      <div className="flex items-center gap-4">
                        <button
                          onClick={() => setExpandedId(expandedId === skill.id ? null : skill.id)}
                          className="text-blue-600 hover:text-blue-800 transition-colors text-sm cursor-pointer"
                        >
                          {expandedId === skill.id ? (siteLanguage === 'english' ? 'Close' : siteLanguage === 'russian' ? '–ó–∞–∫—Ä—ã—Ç—å' : 'Baƒülayƒ±n') : (siteLanguage === 'english' ? 'Edit' : siteLanguage === 'russian' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : 'Redakt…ô edin')}
                        </button>
                        <button
                          onClick={() => removeSkill(skill.id)}
                          className="text-red-600 hover:text-red-800 transition-colors text-sm cursor-pointer"
                        >
                          {siteLanguage === 'english' ? 'Delete' : siteLanguage === 'russian' ? '–£–¥–∞–ª–∏—Ç—å' : 'Silin'}
                        </button>
                      </div>
                    </div>

                    {expandedId === skill.id && (
                      <div className="space-y-4 border-t border-gray-200 pt-4">
                        <div className="grid grid-cols-1 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              {siteLanguage === 'english' ? 'Skill Name' : siteLanguage === 'russian' ? '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞' : 'Bacarƒ±q adƒ±'} <span className="text-red-500">*</span>
                            </label>
                            <input
                              type="text"
                              value={skill.name}
                              onChange={(e) => updateSkill(skill.id, 'name', e.target.value)}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                              placeholder={content.softSkillPlaceholder}
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-2">
                              {siteLanguage === 'english' ? 'Skill Type' : siteLanguage === 'russian' ? '–¢–∏–ø –Ω–∞–≤—ã–∫–∞' : 'Bacarƒ±q n√∂v√º'}
                            </label>
                            <select
                              value={skill.type || 'soft'}
                              onChange={(e) => updateSkill(skill.id, 'type', e.target.value as 'hard' | 'soft')}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none"
                            >
                              <option value="hard">
                                {siteLanguage === 'english' ? 'Technical Skill' : siteLanguage === 'russian' ? '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–≤—ã–∫' : 'Texniki Bacarƒ±q'}
                              </option>
                              <option value="soft">
                                {siteLanguage === 'english' ? 'Soft Skill' : siteLanguage === 'russian' ? '–õ–∏—á–Ω—ã–π –Ω–∞–≤—ã–∫' : '≈û…ôxsi Bacarƒ±q'}
                              </option>
                            </select>
                          </div>
                          
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {data.length > 0 && (
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            {siteLanguage === 'english' ? 'Skills' : siteLanguage === 'russian' ? '–ù–∞–≤—ã–∫–∏' : 'Bacarƒ±qlar'}
          </h3>
          <p className="text-sm text-gray-700">
            {siteLanguage === 'english' 
              ? 'Organize your skills into categories (e.g., "Programming", "Design", "Management") and place the most important skills at the top.'
              : siteLanguage === 'russian' 
              ? '–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç") –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤–≤–µ—Ä—Ö—É.'
              : 'Bacarƒ±qlarƒ±nƒ±zƒ± kateqoriyalara ayƒ±rƒ±n (m…ôs…ôl…ôn: "Proqramla≈üdƒ±rma", "Dizayn", "ƒ∞dar…ôetm…ô") v…ô …ôn vacib bacarƒ±qlarƒ±nƒ±zƒ± yuxarƒ±da yerl…ô≈üdirin.'
            }
          </p>
        </div>
      )}

      {/* AI Skills Suggestions Section - Enhanced */}
      <div className="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg p-6 border border-purple-200">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-lg flex items-center justify-center">
              <span className="text-white text-lg">ü§ñ</span>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {siteLanguage === 'english' ? 'AI Professional Skills Analyzer' : siteLanguage === 'russian' ? '–ò–ò –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ù–∞–≤—ã–∫–æ–≤' : 'AI Pe≈ü…ôkar Bacarƒ±qlar Analiz√ßisi'}
              </h3>
              <p className="text-sm text-gray-600">
                {canUseAI ?
                  (siteLanguage === 'english' 
                    ? `${userTier} member - Professional skills analysis and recommendations`
                    : siteLanguage === 'russian'
                    ? `${userTier} —É—á–∞—Å—Ç–Ω–∏–∫ - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏`
                    : `${userTier} √ºzv√º - Pe≈ü…ôkar bacarƒ±qlar analizi v…ô t√∂vsiy…ôl…ôri`
                  ) :
                  (siteLanguage === 'english' 
                    ? 'Available for Premium and Medium members'
                    : siteLanguage === 'russian'
                    ? '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è Premium –∏ Medium —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
                    : 'Premium v…ô Medium √ºzvl…ôr √º√ß√ºn m√∂vcuddur'
                  )
                }
              </p>
            </div>
          </div>

          {canUseAI && (
            <div className="text-xs text-purple-600 bg-purple-100 px-2 py-1 rounded-full">
              ‚ú® AI Powered
            </div>
          )}
        </div>

        <div className="space-y-4">
          <div className="text-sm text-gray-700">
            <p className="mb-2">
              <strong>
                {siteLanguage === 'english' 
                  ? 'AI will analyze your profile:' 
                  : siteLanguage === 'russian'
                  ? '–ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:'
                  : 'AI sizin profilinizi analiz ed…ôc…ôk:'
                }
              </strong>
            </p>
            <ul className="list-disc list-inside space-y-1 text-xs text-gray-600 ml-2">
              <li>
                {siteLanguage === 'english' 
                  ? 'Your work experience and career development'
                  : siteLanguage === 'russian'
                  ? '–í–∞—à —Ä–∞–±–æ—á–∏–π –æ–ø—ã—Ç –∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'
                  : 'ƒ∞≈ü t…ôcr√ºb…ôniz v…ô karyera inki≈üafƒ±nƒ±z'
                }
              </li>
              <li>
                {siteLanguage === 'english' 
                  ? 'Educational background and certifications'
                  : siteLanguage === 'russian'
                  ? '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'
                  : 'T…ôhsil fonu v…ô sertifikatlarƒ±nƒ±z'
                }
              </li>
              <li>
                {siteLanguage === 'english' 
                  ? 'Current skills and expertise areas'
                  : siteLanguage === 'russian'
                  ? '–¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã'
                  : 'M√∂vcud bacarƒ±qlar v…ô expertiza sah…ôl…ôri'
                }
              </li>
              <li>
                {siteLanguage === 'english' 
                  ? 'Industry trends and market demands'
                  : siteLanguage === 'russian'
                  ? '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
                  : 'ƒ∞ndustiya trendl…ôri v…ô market t…ôl…ôbl…ôri'
                }
              </li>
              <li>
                {siteLanguage === 'english' 
                  ? 'Strategic skills for your career goals'
                  : siteLanguage === 'russian'
                  ? '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π'
                  : 'Karyera m…ôqs…ôdl…ôriniz √º√ß√ºn strateji skills'
                }
              </li>
            </ul>
          </div>

          <button
            onClick={getSuggestionsFromAI}
            disabled={!canUseAI || aiSuggesting}
            className={`w-full px-6 py-3 rounded-lg text-sm font-medium transition-all duration-200 ${
              !canUseAI 
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                : aiSuggesting
                ? 'bg-purple-300 text-purple-700 cursor-not-allowed'
                : 'bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5'
            }`}
          >
            {aiSuggesting ? (
              <div className="flex items-center justify-center gap-2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-purple-600"></div>
                <span>
                  {siteLanguage === 'english' 
                    ? 'AI analyzing your profile...' 
                    : siteLanguage === 'russian'
                    ? '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...'
                    : 'AI profilinizi analiz edir...'
                  }
                </span>
              </div>
            ) : (
              <div className="flex items-center justify-center gap-2">
                <span>üéØ</span>
                <span>
                  {siteLanguage === 'english' 
                    ? 'Get Professional Skills Recommendations' 
                    : siteLanguage === 'russian'
                    ? '–ü–æ–ª—É—á–∏—Ç—å –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ù–∞–≤—ã–∫–æ–≤'
                    : 'Pe≈ü…ôkar Bacarƒ±qlar T√∂vsiy…ôl…ôri Al'
                  }
                </span>
              </div>
            )}
          </button>

          {!canUseAI && (
            <div className="p-4 bg-gradient-to-r from-purple-100 to-indigo-100 border border-purple-200 rounded-lg">
              <div className="flex items-start gap-3">
                <span className="text-purple-600 text-lg">üíé</span>
                <div>
                  <p className="text-sm font-medium text-purple-800 mb-1">
                    {siteLanguage === 'english' 
                      ? 'AI Professional Skills Analyzer'
                      : siteLanguage === 'russian'
                      ? '–ò–ò –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ù–∞–≤—ã–∫–æ–≤'
                      : 'AI Pe≈ü…ôkar Bacarƒ±qlar Analiz√ßisi'
                    }
                  </p>
                  <p className="text-xs text-purple-700">
                    {siteLanguage === 'english' 
                      ? 'Provides deep analysis of your CV data to recommend the most suitable professional skills for your career. Available for Premium and Medium plans.'
                      : siteLanguage === 'russian'
                      ? '–ü—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∫–∞—Ä—å–µ—Ä—ã. –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è Premium –∏ Medium –ø–ª–∞–Ω–æ–≤.'
                      : 'CV m…ôlumatlarƒ±nƒ±zƒ± d…ôrin analiz ed…ôr…ôk karyeranƒ±z √º√ß√ºn …ôn m√ºnasib professional skills t√∂vsiy…ôl…ôri verir. Premium v…ô Medium planlar √º√ß√ºn m√∂vcuddur.'
                    }
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* AI Suggestions Display - Enhanced */}
          {showSuggestions && suggestions.length > 0 && (
            <div className="mt-6 space-y-4">
              <div className="flex items-center justify-between">
                <h4 className="text-base font-semibold text-gray-900">
                  üéØ AI Pe≈ü…ôkar T√∂vsiy…ôl…ôri
                </h4>
                <span className="text-xs text-purple-600 bg-purple-100 px-2 py-1 rounded-full">
                  {suggestions.length} t…ôklif
                </span>
              </div>

              <div className="space-y-4 max-h-96 overflow-y-auto">
                {suggestions.map((suggestion, index) => (
                  <div key={index} className="bg-white p-5 rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                    {/* Skill Header */}
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1 flex-wrap">
                          <h5 className="text-base font-semibold text-gray-900 truncate">
                            {suggestion.name}
                          </h5>
                          {suggestion.category && (
                            <span className={`text-xs px-2 py-1 rounded-full font-medium whitespace-nowrap flex-shrink-0 ${
                              suggestion.category === 'Strategic' ? 'bg-purple-100 text-purple-700' :
                              suggestion.category === 'Technical' ? 'bg-blue-100 text-blue-700' :
                              suggestion.category === 'Leadership' ? 'bg-amber-100 text-amber-700' :
                              'bg-gray-100 text-gray-700'
                            }`}>
                              {suggestion.category}
                            </span>
                          )}
                        </div>

                        {/* Skill Metrics */}
                        <div className="flex items-center gap-4 mb-2 flex-wrap">
                          {suggestion.relevanceScore && (
                            <div className="flex items-center gap-1 min-w-0">
                              <span className="text-xs text-gray-500 whitespace-nowrap">Uyƒüunluq:</span>
                              <div className="flex">
                                {[...Array(10)].map((_, i) => (
                                  <span key={i} className={`text-xs ${
                                    i < (suggestion.relevanceScore || 0) ? 'text-yellow-400' : 'text-gray-300'
                                  }`}>
                                    ‚òÖ
                                  </span>
                                ))}
                              </div>
                              <span className="text-xs text-gray-600">
                                {suggestion.relevanceScore}/10
                              </span>
                            </div>
                          )}

                          {suggestion.marketDemand && (
                            <span className={`text-xs px-2 py-1 rounded-full font-medium whitespace-nowrap flex-shrink-0 ${
                              suggestion.marketDemand === 'Critical' ? 'bg-red-100 text-red-700' :
                              suggestion.marketDemand === 'Very High' ? 'bg-orange-100 text-orange-700' :
                              'bg-green-100 text-green-700'
                            }`}>
                              üìà {suggestion.marketDemand}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Skill Description */}
                    <p className="text-sm text-gray-700 mb-3 leading-relaxed break-words">
                      {suggestion.reason}
                    </p>

                    {/* Additional Info */}
                    {(suggestion.implementation || suggestion.timeToMaster || suggestion.industryTrend) && (
                      <div className="bg-gray-50 p-3 rounded-lg mb-3 space-y-2 overflow-hidden">
                        {suggestion.implementation && (
                          <div className="flex items-start gap-2">
                            <span className="text-xs text-gray-500 font-medium whitespace-nowrap flex-shrink-0">üí° Nec…ô inki≈üaf etdirin:</span>
                            <span className="text-xs text-gray-700 break-words">{suggestion.implementation}</span>
                          </div>
                        )}

                        {suggestion.timeToMaster && (
                          <div className="flex items-center gap-2 flex-wrap">
                            <span className="text-xs text-gray-500 font-medium whitespace-nowrap">‚è±Ô∏è M…ônims…ôm…ô m√ºdd…ôti:</span>
                            <span className="text-xs text-gray-700">{suggestion.timeToMaster}</span>
                          </div>
                        )}

                        {suggestion.industryTrend && (
                          <div className="flex items-center gap-2 flex-wrap">
                            <span className="text-xs text-gray-500 font-medium whitespace-nowrap">üìä ƒ∞ndustiya trendi:</span>
                            <span className={`text-xs px-2 py-1 rounded-full font-medium whitespace-nowrap ${
                              suggestion.industryTrend === 'Future-Critical' ? 'bg-purple-100 text-purple-700' :
                              suggestion.industryTrend === 'Essential' ? 'bg-red-100 text-red-700' :
                              suggestion.industryTrend === 'Growing' ? 'bg-green-100 text-green-700' :
                              'bg-blue-100 text-blue-700'
                            }`}>
                              {suggestion.industryTrend}
                            </span>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Action Button */}
                    <button
                      onClick={() => addSuggestedSkill(suggestion)}
                      className="w-full px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white text-sm font-medium rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 shadow-sm hover:shadow-md"
                    >
                      ‚ú® CV-y…ô …ôlav…ô et
                    </button>
                  </div>
                ))}
              </div>

              {/* Regenerate Button */}
              <div className="pt-4 border-t border-gray-200">
                <button
                  onClick={getSuggestionsFromAI}
                  disabled={aiSuggesting}
                  className="w-full px-4 py-2 text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors text-sm font-medium"
                >
                  üîÑ Yeni t√∂vsiy…ôl…ôr al
                </button>
                <p className="text-xs text-gray-500 text-center mt-2">
                  H…ôr d…ôf…ô f…ôrqli professional skills t√∂vsiy…ôl…ôri alacaqsƒ±nƒ±z
                </p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Upgrade Modal - New */}
      {showUpgradeModal && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
          <div className="bg-white rounded-lg shadow-lg p-6 max-w-sm w-full mx-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Premium √úzvl√ºk T…ôklifi</h3>
              <button
                onClick={() => setShowUpgradeModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ‚úï
              </button>
            </div>

            <div className="mb-4">
              <div className="flex items-center gap-3 mb-3">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-lg flex items-center justify-center">
                  <span className="text-white text-sm">ü§ñ</span>
                </div>
                <div>
                  <p className="text-sm font-medium text-purple-800 mb-1">
                    AI Pe≈ü…ôkar Bacarƒ±qlar Analiz√ßisi
                  </p>
                </div>
              </div>

              <p className="text-sm text-gray-700 mb-4">
                AI Pe≈ü…ôkar Bacarƒ±qlar Analiz√ßisi funksiyasƒ±ndan istifad…ô etm…ôk √º√ß√ºn
                Premium v…ô ya Medium planƒ±na y√ºks…ôltm…ôyi d√º≈ü√ºn√ºn. Bu, CV m…ôlumatlarƒ±nƒ±za
                …ôsaslanaraq siz…ô …ôn uyƒüun professional skills t√∂vsiy…ôl…ôrini almanƒ±za k√∂m…ôk ed…ôc…ôk.
              </p>

              <div className="bg-purple-50 p-3 rounded-lg mb-4">
                <h4 className="text-sm font-medium text-purple-800 mb-2">∆èld…ô ed…ôc…ôyiniz:</h4>
                <ul className="text-xs text-purple-700 space-y-1">
                  <li>‚Ä¢ AI-powered skills analizi</li>
                  <li>‚Ä¢ Karyera √º√ß√ºn strateji t√∂vsiy…ôl…ôr</li>
                  <li>‚Ä¢ ƒ∞ndustiya trend analizi</li>
                  <li>‚Ä¢ Personalized skill roadmap</li>
                </ul>
              </div>
            </div>

            <div className="flex gap-2">
              <button
                onClick={() => setShowUpgradeModal(false)}
                className="flex-1 px-4 py-2 text-center text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Sonra
              </button>
              <a
                href="/pricing"
                className="flex-1 px-4 py-2 text-center text-white bg-gradient-to-r from-purple-600 to-indigo-600 rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200"
              >
                Planlarƒ± G√∂r√ºnt√ºl…ô
              </a>
            </div>
          </div>
        </div>
      )}
      {data.length > 0 && (
          <div className="text-center">
            <button
                onClick={addSkill}
                className="px-4 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors"
            >
              {siteLanguage === 'english' ? '+ Add another skill' : siteLanguage === 'russian' ? '+ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –Ω–∞–≤—ã–∫' : '+ Ba≈üqa bacarƒ±q …ôlav…ô edin'}
            </button>
          </div>
      )}

    </div>
  );
}
