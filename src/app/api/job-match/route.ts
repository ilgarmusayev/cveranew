import { NextRequest, NextResponse } from 'next/server';
import { verifyJWT } from '@/lib/jwt';
import { prisma } from '@/lib/prisma';
import { getBestApiKey, recordApiUsage, markApiKeyFailed } from '@/lib/api-service';
import { GeminiV1Client } from '@/lib/gemini-v1-client';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Job Match Analysis API √ßaƒüƒ±rƒ±ldƒ±');

    // Verify JWT token
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Authorization header t…ôl…ôb olunur' },
        { status: 401 }
      );
    }

    const token = authHeader.substring(7);
    const decoded = verifyJWT(token);

    if (!decoded) {
      return NextResponse.json(
        { error: 'Etibarsƒ±z token' },
        { status: 401 }
      );
    }

    // Parse request body
    const body = await request.json();
    const { cvId, jobTitle, jobDescription, language = 'az' } = body;

    console.log('üîç Job Match API received language:', language);
    console.log('üìã Request body:', { cvId, jobTitle, jobDescriptionLength: jobDescription?.length, language });

    if (!cvId || !jobTitle || !jobDescription) {
      return NextResponse.json(
        { error: 'CV ID, i≈ü ba≈ülƒ±ƒüƒ± v…ô i≈ü t…ôsviri t…ôl…ôb olunur' },
        { status: 400 }
      );
    }

    console.log('üìã Job Match analizi:', { cvId, jobTitle, userId: decoded.userId });

    // Get CV data from database
    const cv = await prisma.cV.findFirst({
      where: {
        id: cvId,
        userId: decoded.userId
      }
    });

    if (!cv) {
      return NextResponse.json(
        { error: 'CV tapƒ±lmadƒ± v…ô ya siz…ô aid deyil' },
        { status: 404 }
      );
    }

    const cvData = cv.cv_data as any;

    // Extract CV text for analysis
    const cvText = extractCVText(cvData);

    console.log('üîç CV m…ôlumatlarƒ± √ßƒ±xarƒ±ldƒ±:', { 
      cvTitle: cv.title,
      textLength: cvText.length,
      jobTitleLength: jobTitle.length,
      jobDescLength: jobDescription.length,
      cvDataStructure: {
        hasPersonalInfo: !!cvData.personalInfo,
        experienceCount: cvData.experience?.length || 0,
        educationCount: cvData.education?.length || 0,
        skillsCount: cvData.skills?.length || 0,
        languagesCount: cvData.languages?.length || 0,
        certificationsCount: cvData.certifications?.length || 0,
        projectsCount: cvData.projects?.length || 0,
        awardsCount: cvData.awards?.length || 0,
        honorsCount: cvData.honors?.length || 0,
        volunteerCount: cvData.volunteerExperience?.length || 0
      }
    });

    // Log first 500 characters of CV text for debugging
    console.log('üìÑ CV m…ôtn n√ºmun…ôsi (ilk 500 simvol):', cvText.substring(0, 500));

    // Generate AI analysis with language support
    const analysis = await generateJobMatchAnalysis(cvText, jobTitle, jobDescription, language);

    console.log('‚úÖ Job Match analizi tamamlandƒ±:', {
      overallScore: analysis.overallScore,
      matchingPoints: analysis.matchingPoints.length,
      improvementAreas: analysis.improvementAreas.length,
      recommendations: analysis.recommendations.length
    });

    return NextResponse.json({
      success: true,
      analysis: analysis,
      metadata: {
        cvTitle: cv.title,
        jobTitle: jobTitle,
        analyzedAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Job Match Analysis API x…ôtasƒ±:', error);

    const errorMessage = error instanceof Error ? error.message : 'Nam…ôlum x…ôta';
    
    return NextResponse.json(
      { 
        error: 'Job Match analizi x…ôtasƒ±',
        details: errorMessage
      },
      { status: 500 }
    );
  }
}

// Extract readable text from CV data
function extractCVText(cvData: any): string {
  const sections = [];

  // Personal Info
  if (cvData.personalInfo) {
    const personal = cvData.personalInfo;
    sections.push(`--- ≈û∆èXSƒ∞ M∆èLUMATLAR ---`);
    sections.push(`Ad: ${personal.fullName || ''}`);
    sections.push(`Ba≈ülƒ±q/V…ôzif…ô: ${personal.title || personal.field || ''}`);
    sections.push(`Email: ${personal.email || ''}`);
    sections.push(`Telefon: ${personal.phone || ''}`);
    sections.push(`Yer: ${personal.location || ''}`);
    sections.push(`LinkedIn: ${personal.linkedin || ''}`);
    sections.push(`Website: ${personal.website || ''}`);
    sections.push(`X√ºlas…ô: ${personal.summary || ''}`);
  }

  // Experience
  if (cvData.experience && cvData.experience.length > 0) {
    sections.push('\\n--- ƒ∞≈û T∆èCR√úB∆èSƒ∞ ---');
    cvData.experience.forEach((exp: any, index: number) => {
      sections.push(`${index + 1}. ${exp.position || 'V…ôzif…ô bilinmir'} - ${exp.company || '≈ûirk…ôt bilinmir'}`);
      sections.push(`   M√ºdd…ôt: ${exp.startDate || ''} - ${exp.endDate || (exp.current ? 'ƒ∞ndi' : '')}`);
      sections.push(`   Yer: ${exp.location || ''}`);
      sections.push(`   T…ôsvir: ${exp.description || 'T…ôsvir yoxdur'}`);
    });
  }

  // Education
  if (cvData.education && cvData.education.length > 0) {
    sections.push('\\n--- T∆èHSƒ∞L ---');
    cvData.education.forEach((edu: any, index: number) => {
      sections.push(`${index + 1}. ${edu.degree || 'D…ôr…ôc…ô bilinmir'} - ${edu.institution || 'M√º…ôssis…ô bilinmir'}`);
      sections.push(`   Sah…ô: ${edu.fieldOfStudy || edu.field || 'Sah…ô bilinmir'}`);
      sections.push(`   M√ºdd…ôt: ${edu.startDate || ''} - ${edu.endDate || ''}`);
      sections.push(`   T…ôsvir: ${edu.description || ''}`);
    });
  }

  // Skills - Hard v…ô Soft ayrƒ±-ayrƒ±lƒ±qda
  if (cvData.skills && cvData.skills.length > 0) {
    // Hard Skills
    const hardSkills = cvData.skills.filter((skill: any) => 
      skill.type === 'hard' || skill.type === 'technical' || 
      (!skill.type && isHardSkill(skill.name || skill))
    );
    
    // Soft Skills  
    const softSkills = cvData.skills.filter((skill: any) => 
      skill.type === 'soft' || skill.type === 'personal' ||
      (!skill.type && isSoftSkill(skill.name || skill))
    );
    
    // General Skills (type g√∂st…ôrilm…ômi≈üs…ô)
    const generalSkills = cvData.skills.filter((skill: any) => 
      !skill.type && !isHardSkill(skill.name || skill) && !isSoftSkill(skill.name || skill)
    );

    if (hardSkills.length > 0) {
      sections.push('\\n--- HARD SKILLS (TEXNƒ∞Kƒ∞ BACARIQLAR) ---');
      const hardSkillsText = hardSkills.map((skill: any) => {
        const name = skill.name || skill;
        const level = skill.level ? ` (${skill.level})` : '';
        return `${name}${level}`;
      }).filter(Boolean);
      sections.push(hardSkillsText.join(', '));
    }

    if (softSkills.length > 0) {
      sections.push('\\n--- SOFT SKILLS (≈û∆èXSƒ∞ BACARIQLAR) ---');
      const softSkillsText = softSkills.map((skill: any) => {
        const name = skill.name || skill;
        const level = skill.level ? ` (${skill.level})` : '';
        return `${name}${level}`;
      }).filter(Boolean);
      sections.push(softSkillsText.join(', '));
    }

    if (generalSkills.length > 0) {
      sections.push('\\n--- Dƒ∞G∆èR BACARIQLAR ---');
      const generalSkillsText = generalSkills.map((skill: any) => {
        const name = skill.name || skill;
        const level = skill.level ? ` (${skill.level})` : '';
        return `${name}${level}`;
      }).filter(Boolean);
      sections.push(generalSkillsText.join(', '));
    }
  }

  // Languages
  if (cvData.languages && cvData.languages.length > 0) {
    sections.push('\\n--- Dƒ∞LL∆èR ---');
    const languages = cvData.languages.map((lang: any) => 
      `${lang.language || lang} (${lang.level || 'S…ôviyy…ô bilinmir'})`
    );
    sections.push(languages.join(', '));
  }

  // Certifications
  if (cvData.certifications && cvData.certifications.length > 0) {
    sections.push('\\n--- SERTƒ∞Fƒ∞KATLAR ---');
    cvData.certifications.forEach((cert: any, index: number) => {
      sections.push(`${index + 1}. ${cert.name || 'Sertifikat adƒ± bilinmir'} - ${cert.issuer || 'Ver…ôn t…ô≈ükilat bilinmir'}`);
      sections.push(`   Tarix: ${cert.issueDate || ''}`);
      sections.push(`   Kredensial ID: ${cert.credentialId || ''}`);
      sections.push(`   URL: ${cert.url || ''}`);
    });
  }

  // Projects
  if (cvData.projects && cvData.projects.length > 0) {
    sections.push('\\n--- LAYƒ∞H∆èL∆èR ---');
    cvData.projects.forEach((proj: any, index: number) => {
      sections.push(`${index + 1}. ${proj.name || 'Layih…ô adƒ± bilinmir'}`);
      sections.push(`   T…ôsvir: ${proj.description || 'T…ôsvir yoxdur'}`);
      sections.push(`   Texnologiyalar: ${Array.isArray(proj.technologies) ? proj.technologies.join(', ') : proj.technologies || ''}`);
      sections.push(`   URL: ${proj.url || ''}`);
      sections.push(`   M√ºdd…ôt: ${proj.startDate || ''} - ${proj.endDate || (proj.current ? 'ƒ∞ndi' : '')}`);
    });
  }

  // Awards
  if (cvData.awards && cvData.awards.length > 0) {
    sections.push('\\n--- M√úKAFATLAR ---');
    cvData.awards.forEach((award: any, index: number) => {
      sections.push(`${index + 1}. ${award.title || award.name || 'M√ºkafat adƒ± bilinmir'}`);
      sections.push(`   Ver…ôn: ${award.issuer || award.organization || 'Ver…ôn t…ô≈ükilat bilinmir'}`);
      sections.push(`   Tarix: ${award.date || ''}`);
      sections.push(`   T…ôsvir: ${award.description || ''}`);
    });
  }

  // Honors
  if (cvData.honors && cvData.honors.length > 0) {
    sections.push('\\n--- F∆èXRI ADLAR ---');
    cvData.honors.forEach((honor: any, index: number) => {
      sections.push(`${index + 1}. ${honor.title || honor.name || 'F…ôxri ad bilinmir'}`);
      sections.push(`   Ver…ôn: ${honor.issuer || honor.organization || 'Ver…ôn t…ô≈ükilat bilinmir'}`);
      sections.push(`   Tarix: ${honor.date || ''}`);
      sections.push(`   T…ôsvir: ${honor.description || ''}`);
    });
  }

  // Volunteer Experience
  if (cvData.volunteerExperience && cvData.volunteerExperience.length > 0) {
    sections.push('\\n--- K√ñN√úLL√ú T∆èCR√úB∆èSƒ∞ ---');
    cvData.volunteerExperience.forEach((vol: any, index: number) => {
      sections.push(`${index + 1}. ${vol.role || vol.position || 'Rol bilinmir'} - ${vol.organization || 'T…ô≈ükilat bilinmir'}`);
      sections.push(`   Sah…ô: ${vol.cause || vol.area || vol.field || ''}`);
      sections.push(`   M√ºdd…ôt: ${vol.startDate || ''} - ${vol.endDate || (vol.current ? 'ƒ∞ndi' : '')}`);
      sections.push(`   T…ôsvir: ${vol.description || 'T…ôsvir yoxdur'}`);
      sections.push(`   M√ºdd…ôt: ${vol.duration || ''}`);
    });
  }

  // Additional fields (custom sections)
  if (cvData.customSections && cvData.customSections.length > 0) {
    sections.push('\\n--- ∆èLAV∆è B√ñLM∆èL∆èR ---');
    cvData.customSections.forEach((section: any, index: number) => {
      sections.push(`${index + 1}. ${section.title || 'Ba≈ülƒ±q bilinmir'}`);
      sections.push(`   M…ôzmun: ${section.content || 'M…ôzmun yoxdur'}`);
    });
  }

  return sections.join('\\n');
}

// Helper function to identify hard skills
function isHardSkill(skillName: string): boolean {
  const hardSkillKeywords = [
    // Programming languages
    'javascript', 'python', 'java', 'c++', 'c#', 'php', 'ruby', 'go', 'rust', 'swift', 'kotlin',
    // Frameworks & Libraries
    'react', 'angular', 'vue', 'node', 'express', 'django', 'flask', 'spring', 'laravel',
    // Databases
    'sql', 'mysql', 'postgresql', 'mongodb', 'redis', 'oracle', 'sqlite',
    // Tools & Technologies
    'git', 'docker', 'kubernetes', 'aws', 'azure', 'gcp', 'jenkins', 'linux', 'windows',
    // Design & Software
    'photoshop', 'illustrator', 'figma', 'sketch', 'autocad', 'solidworks',
    // Data & Analytics
    'excel', 'tableau', 'power bi', 'matlab', 'r', 'spss', 'sas',
    // Marketing & Digital
    'google analytics', 'seo', 'sem', 'adwords', 'facebook ads', 'mailchimp',
    // Other technical
    'html', 'css', 'typescript', 'api', 'rest', 'graphql', 'microservices'
  ];
  
  const skillLower = skillName.toLowerCase();
  return hardSkillKeywords.some(keyword => skillLower.includes(keyword));
}

// Helper function to identify soft skills
function isSoftSkill(skillName: string): boolean {
  const softSkillKeywords = [
    // Communication
    'kommunikasiya', 'communication', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', 'presentation', 't…ôqdimat',
    // Leadership
    'liderlik', 'leadership', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ', 'management', 'idar…ôetm…ô', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
    // Teamwork
    'komanda', 'team', '–∫–æ–º–∞–Ω–¥–∞', 'collaboration', '…ôm…ôkda≈ülƒ±q', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
    // Problem solving
    'problem', 'h…ôll', '—Ä–µ—à–µ–Ω–∏–µ', 'analysis', 'analiz', '–∞–Ω–∞–ª–∏–∑',
    // Time management
    'vaxt', 'time', '–≤—Ä–µ–º—è', 'planla≈üdƒ±rma', 'planning', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    // Creativity
    'yaradƒ±cƒ±lƒ±q', 'creativity', '–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', 'innovation', 'innovasiya',
    // Adaptability
    'adaptasiya', 'flexibility', '–≥–∏–±–∫–æ—Å—Ç—å', '√ßeviklik',
    // Critical thinking
    't…ônqidi', 'critical', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ', 'd√º≈ü√ºnc…ô', 'thinking'
  ];
  
  const skillLower = skillName.toLowerCase();
  return softSkillKeywords.some(keyword => skillLower.includes(keyword));
}

// Generate AI-powered job match analysis with language support
async function generateJobMatchAnalysis(cvText: string, jobTitle: string, jobDescription: string, language: string = 'az') {
  try {
    console.log('ü§ñ AI Job Match analizi ba≈ülayƒ±r...');

    // Get full language name for better AI understanding
    const languageNames = {
      'az': 'AZERBAIJANI (AZ∆èRBAYCAN Dƒ∞Lƒ∞)',
      'en': 'ENGLISH',
      'ru': 'RUSSIAN (–†–£–°–°–ö–ò–ô –Ø–ó–´–ö)'
    };
    
    const fullLanguageName = languageNames[language as keyof typeof languageNames] || languageNames.az;
    console.log('üåê Full language name for AI:', fullLanguageName);

    // Language-specific prompts with EMBEDDED language parameter
    const prompts = {
      az: `
LANGUAGE: AZERBAIJANI
OUTPUT LANGUAGE: AZERBAIJANI (AZ∆èRBAYCAN Dƒ∞Lƒ∞)
CAVAB Dƒ∞Lƒ∞: AZ∆èRBAYCAN Dƒ∞Lƒ∞

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL SYSTEM INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
RESPONSE LANGUAGE: ${fullLanguageName}
YOU MUST RESPOND ONLY IN AZERBAIJANI LANGUAGE (AZ∆èRBAYCAN Dƒ∞Lƒ∞).
ABSOLUTELY NO ENGLISH, RUSSIAN OR OTHER LANGUAGES ALLOWED IN YOUR RESPONSE.
ALL text arrays (matchingPoints, improvementAreas, recommendations) MUST BE 100% IN AZERBAIJANI.
IF YOU USE ANY NON-AZERBAIJANI TEXT, THE SYSTEM WILL FAIL.

M∆èCBURI: Yalnƒ±z AZ∆èRBAYCAN dilind…ô cavab verin!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è END OF CRITICAL INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

S…ôn pe≈ü…ôkar karyera m…ôsl…ôh…ôt√ßisis…ôn. 
S…ônin v…ôzif…ôn verilmi≈ü CV m…ôlumatlarƒ±nƒ± v…ô i≈ü elanƒ±nƒ± AZ∆èRBAYCAN Dƒ∞Lƒ∞ND∆è analiz ed…ôr…ôk:
1. Namiz…ôdin i≈ü elanƒ±na uyƒüunluq d…ôr…ôc…ôsini qiym…ôtl…ôndirm…ôk (0%-100%). 
2. ∆èsas uyƒüunluq m…ôqamlarƒ±nƒ± (skill, t…ôcr√ºb…ô, t…ôhsil v…ô s.) qƒ±sa madd…ôl…ôrl…ô g√∂st…ôrm…ôk. 
3. Uyƒüun olmayan v…ô ya inki≈üaf etdirilm…ôli sah…ôl…ôri qeyd etm…ôk. 
4. CV-ni h…ômin vakansiyaya daha uyƒüunla≈üdƒ±rmaq √º√ß√ºn konkret t√∂vsiy…ôl…ôr verm…ôk.

‚ö†Ô∏è REMINDER: Your response MUST be in ${fullLanguageName} language!

---
### ƒ∞≈ü Elanƒ±:
**Ba≈ülƒ±q:** ${jobTitle}

**T…ôsvir:**
${jobDescription}

### Namiz…ôdin CV m…ôlumatlarƒ±:
${cvText}

---

ANALIZ QAYDASI:
1. ƒ∞≈ü elanƒ±ndakƒ± t…ôl…ôbl…ôri (skills, t…ôcr√ºb…ô, t…ôhsil, sertifikatlar) detallƒ± analiz et
2. CV-d…ôki B√úT√úN b√∂lm…ôl…ôri h…ômin t…ôl…ôbl…ôrl…ô m√ºqayis…ô et:
   - ≈û…ôxsi m…ôlumatlar v…ô x√ºlas…ô
   - ƒ∞≈ü t…ôcr√ºb…ôsi (v…ôzif…ôl…ôr, ≈üirk…ôtl…ôr, t…ôsvirl…ôr)
   - T…ôhsil (d…ôr…ôc…ô, sah…ô, m√º…ôssis…ô)
   - Bacarƒ±qlar (hard skills, soft skills, s…ôviyy…ôl…ôr)
   - Dill…ôr v…ô s…ôviyy…ôl…ôri
   - Sertifikatlar v…ô kurslar
   - Layih…ôl…ôr v…ô portfel
   - M√ºkafat v…ô f…ôxri adlar
   - K√∂n√ºll√º t…ôcr√ºb…ô
   - ∆èlav…ô f…ôaliyy…ôtl…ôr
3. Uyƒüunluq faizini hesabla: 
   - Skills uyƒüunluƒüu (35%)
   - T…ôcr√ºb…ô uyƒüunluƒüu (30%) 
   - T…ôhsil uyƒüunluƒüu (15%)
   - Sertifikatlar v…ô kurslar (10%)
   - Dig…ôr faktorlar (layih…ôl…ôr, dill…ôr, m√ºkafatlar) (10%)
4. Real v…ô konkret n…ôtic…ôl…ôr ver, CV-d…ôki konkret m…ôlumatlarƒ± istinad et

T∆èL∆èBL∆èR:
- CV-d…ôki B√úT√úN m…ôlumatlarƒ± diqq…ôtl…ô oxu v…ô analiz et
- Uyƒüunluq faizi real v…ô d…ôqiq olsun
- H…ôr b√∂lm…ô √º√ß√ºn 4-6 konkret n√∂qt…ô ver
- CV-d…ôki konkret bacarƒ±q, t…ôcr√ºb…ô v…ô layih…ôl…ôri qeyd et
- T√∂vsiy…ôl…ôr praktik v…ô h…ôyata ke√ßiril…ô bil…ôn olsun
- Az…ôrbaycan dilind…ô cavab ver

‚ö†Ô∏è LANGUAGE REQUIREMENT: Your response MUST be 100% in AZERBAIJANI (Az…ôrbaycan dili).
‚ö†Ô∏è EXAMPLE of CORRECT format (in Azerbaijani):
{
  "overallScore": 75,
  "matchingPoints": [
    "Namiz…ôdd…ô g√ºcl√º Java proqramla≈üdƒ±rma t…ôcr√ºb…ôsi m√∂vcuddur",
    "3 il pe≈ü…ôkar i≈ü t…ôcr√ºb…ôsi t…ôl…ôb…ô tam uyƒüundur",
    "Spring Boot framework bilgisi var"
  ],
  "improvementAreas": [
    "React framework bilikl…ôri z…ôifdir v…ô inki≈üaf etdirilm…ôlidir",
    "UI/UX dizayn t…ôcr√ºb…ôsi yoxdur",
    "M√ºasir frontend texnologiyalarƒ± il…ô i≈ü t…ôcr√ºb…ôsi m…ôhduddur"
  ],
  "recommendations": [
    "React v…ô Next.js texnologiyalarƒ±nƒ± √∂yr…ônin v…ô praktik layih…ôl…ôr yaradƒ±n",
    "≈û…ôxsi portfolio websaytƒ± hazƒ±rlayƒ±n v…ô GitHub-da layih…ôl…ôrinizi payla≈üƒ±n",
    "Frontend sertifikatlarƒ± …ôld…ô edin (m…ôs…ôl…ôn, React Developer Certification)"
  ]
}

‚ö†Ô∏è CRITICAL: All text in arrays MUST be in AZERBAIJANI language. NO English words allowed!

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è FINAL WARNING ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
RESPONSE LANGUAGE REQUIRED: ${fullLanguageName}
BEFORE YOU SUBMIT YOUR RESPONSE:
1. CHECK that ALL text is in AZERBAIJANI (Az…ôrbaycan dili)
2. CHECK that NO English or Russian words exist
3. CHECK that matchingPoints, improvementAreas, recommendations are 100% AZERBAIJANI
IF ANY TEXT IS NOT IN AZERBAIJANI, START OVER!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è END WARNING ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

M√úHƒ∞M: Yalnƒ±z JSON formatƒ±nda cavab ver, he√ß bir …ôlav…ô m…ôtn yazmadan:

{
  "overallScore": 75,
  "matchingPoints": [
    "JavaScript proqramla≈üdƒ±rma bacarƒ±ƒüƒ± var",
    "3 il t…ôcr√ºb…ô t…ôl…ôbin…ô uyƒüundur",
    "..."
  ],
  "improvementAreas": [
    "React framework bilgisi kifay…ôt etmir",
    "UI/UX dizayn t…ôcr√ºb…ôsi yoxdur",
    "..."
  ],
  "recommendations": [
    "React v…ô Next.js √∂yr…ônin v…ô layih…ôl…ôr yaradƒ±n",
    "Portfolio websayti yaradƒ±n",
    "..."
  ]
}
`,
      en: `
LANGUAGE: ENGLISH
OUTPUT LANGUAGE: ENGLISH
RESPONSE LANGUAGE: ENGLISH

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL SYSTEM INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
RESPONSE LANGUAGE: ${fullLanguageName}
YOU MUST RESPOND ONLY IN ENGLISH LANGUAGE.
ABSOLUTELY NO AZERBAIJANI, RUSSIAN OR OTHER LANGUAGES ALLOWED IN YOUR RESPONSE.
ALL text arrays (matchingPoints, improvementAreas, recommendations) MUST BE 100% IN ENGLISH.
IF YOU USE ANY NON-ENGLISH TEXT, THE SYSTEM WILL FAIL.

MANDATORY: Respond ONLY in ENGLISH!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è END OF CRITICAL INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

You are a professional career advisor.
Your task is to analyze the given CV and job posting data IN ENGLISH to:
1. Evaluate the candidate's compatibility with the job posting (0%-100%).
2. Show main matching points (skills, experience, education, etc.) in bullet points.
3. Identify areas that don't match or need development.
4. Provide specific recommendations to better align the CV with this vacancy.

‚ö†Ô∏è REMINDER: Your response MUST be in ${fullLanguageName} language!

---
### Job Posting:
**Title:** ${jobTitle}

**Description:**
${jobDescription}

### Candidate's CV Information:
${cvText}

---

ANALYSIS METHODOLOGY:
1. Analyze job posting requirements (skills, experience, education, certifications) in detail
2. Compare ALL CV sections with those requirements:
   - Personal information and summary
   - Work experience (positions, companies, descriptions)
   - Education (degree, field, institution)
   - Skills (hard skills, soft skills, levels)
   - Languages and proficiency levels
   - Certifications and courses
   - Projects and portfolio
   - Awards and honors
   - Volunteer experience
   - Additional activities
3. Calculate compatibility percentage:
   - Skills compatibility (35%)
   - Experience compatibility (30%)
   - Education compatibility (15%)
   - Certifications and courses (10%)
   - Other factors (projects, languages, awards) (10%)
4. Provide real and concrete results, reference specific CV information

REQUIREMENTS:
- Carefully read and analyze ALL CV information
- Compatibility percentage should be real and accurate
- Provide 4-6 specific points for each section
- Reference specific skills, experience, and projects from CV
- Recommendations should be practical and achievable
- Respond in English

‚ö†Ô∏è LANGUAGE REQUIREMENT: Your response MUST be 100% in ENGLISH.
‚ö†Ô∏è EXAMPLE of CORRECT format (in English):
{
  "overallScore": 75,
  "matchingPoints": [
    "Candidate has strong Java development expertise",
    "Meets 3 years of professional experience requirement",
    "Has Spring Boot framework knowledge"
  ],
  "improvementAreas": [
    "React framework skills are weak and need improvement",
    "No UI/UX design experience",
    "Limited experience with modern frontend technologies"
  ],
  "recommendations": [
    "Learn React and Next.js technologies and build practical projects",
    "Create a personal portfolio website and share projects on GitHub",
    "Obtain frontend certifications (e.g., React Developer Certification)"
  ]
}

‚ö†Ô∏è CRITICAL: All text in arrays MUST be in ENGLISH language. NO other language allowed!

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è FINAL WARNING ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
RESPONSE LANGUAGE REQUIRED: ${fullLanguageName}
BEFORE YOU SUBMIT YOUR RESPONSE:
1. CHECK that ALL text is in ENGLISH
2. CHECK that NO Azerbaijani or Russian words exist
3. CHECK that matchingPoints, improvementAreas, recommendations are 100% ENGLISH
IF ANY TEXT IS NOT IN ENGLISH, START OVER!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è END WARNING ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

IMPORTANT: Respond only in JSON format, without any additional text:

{
  "overallScore": 75,
  "matchingPoints": [
    "Has JavaScript programming skills",
    "Meets 3 years experience requirement",
    "..."
  ],
  "improvementAreas": [
    "React framework knowledge insufficient",
    "No UI/UX design experience",
    "..."
  ],
  "recommendations": [
    "Learn React and Next.js and create projects",
    "Create a portfolio website",
    "..."
  ]
}
`,
      ru: `
LANGUAGE: RUSSIAN
OUTPUT LANGUAGE: RUSSIAN (–†–£–°–°–ö–ò–ô –Ø–ó–´–ö)
–Ø–ó–´–ö –û–¢–í–ï–¢–ê: –†–£–°–°–ö–ò–ô

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL SYSTEM INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
RESPONSE LANGUAGE: ${fullLanguageName}
YOU MUST RESPOND ONLY IN RUSSIAN LANGUAGE (–†–£–°–°–ö–ò–ô –Ø–ó–´–ö).
ABSOLUTELY NO AZERBAIJANI, ENGLISH OR OTHER LANGUAGES ALLOWED IN YOUR RESPONSE.
ALL text arrays (matchingPoints, improvementAreas, recommendations) MUST BE 100% IN RUSSIAN.
IF YOU USE ANY NON-RUSSIAN TEXT, THE SYSTEM WILL FAIL.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è END OF CRITICAL INSTRUCTION ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï –¥–ª—è:
1. –û—Ü–µ–Ω–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π (0%-100%).
2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.) –≤ –≤–∏–¥–µ –ø—É–Ω–∫—Ç–æ–≤.
3. –í—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–ª–∏ —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä–∞–∑–≤–∏—Ç–∏—è –æ–±–ª–∞—Å—Ç–µ–π.
4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

‚ö†Ô∏è –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –í–∞—à –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å –Ω–∞ ${fullLanguageName} —è–∑—ã–∫–µ!

---
### –í–∞–∫–∞–Ω—Å–∏—è:
**–ù–∞–∑–≤–∞–Ω–∏–µ:** ${jobTitle}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
${jobDescription}

### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
${cvText}

---

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ê–ù–ê–õ–ò–ó–ê:
1. –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
2. –°—Ä–∞–≤–Ω–∏—Ç–µ –í–°–ï —Ä–∞–∑–¥–µ–ª—ã —Ä–µ–∑—é–º–µ —Å —ç—Ç–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏:
   - –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ä–µ–∑—é–º–µ
   - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –∫–æ–º–ø–∞–Ω–∏–∏, –æ–ø–∏—Å–∞–Ω–∏—è)
   - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—Å—Ç–µ–ø–µ–Ω—å, –æ–±–ª–∞—Å—Ç—å, —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ)
   - –ù–∞–≤—ã–∫–∏ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –ª–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, —É—Ä–æ–≤–Ω–∏)
   - –Ø–∑—ã–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏ –≤–ª–∞–¥–µ–Ω–∏—è
   - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã
   - –ü—Ä–æ–µ–∫—Ç—ã –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
   - –ù–∞–≥—Ä–∞–¥—ã –∏ –ø–æ—á–µ—Å—Ç–∏
   - –í–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–π –æ–ø—ã—Ç
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
3. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:
   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤ (35%)
   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–ø—ã—Ç–∞ (30%)
   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (15%)
   - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã (10%)
   - –î—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–ø—Ä–æ–µ–∫—Ç—ã, —è–∑—ã–∫–∏, –Ω–∞–≥—Ä–∞–¥—ã) (10%)
4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—é–º–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–µ–∑—é–º–µ
- –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ 4-6 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
- –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ä–µ–∑—é–º–µ
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã–º–∏
- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

‚ö†Ô∏è –Ø–ó–´–ö–û–í–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï: –í–∞—à –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å –Ω–∞ 100% –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ.
‚ö†Ô∏è –ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º):
{
  "overallScore": 75,
  "matchingPoints": [
    "–ö–∞–Ω–¥–∏–¥–∞—Ç –æ–±–ª–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Java",
    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 3 –≥–æ–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞",
    "–ò–º–µ–µ—Ç –∑–Ω–∞–Ω–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ Spring Boot"
  ],
  "improvementAreas": [
    "–ù–∞–≤—ã–∫–∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ React —Å–ª–∞–±—ã–µ –∏ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏",
    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—ã—Ç UI/UX –¥–∏–∑–∞–π–Ω–∞",
    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ frontend —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
  ],
  "recommendations": [
    "–ò–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ React –∏ Next.js –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã",
    "–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ-—Å–∞–π—Ç –∏ –¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ GitHub",
    "–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ frontend (–Ω–∞–ø—Ä–∏–º–µ—Ä, React Developer Certification)"
  ]
}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –º–∞—Å—Å–∏–≤–∞—Ö –î–û–õ–ñ–ï–ù –±—ã—Ç—å –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ù–ï –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è!

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
–¢–†–ï–ë–£–ï–ú–´–ô –Ø–ó–´–ö –û–¢–í–ï–¢–ê: ${fullLanguageName}
–ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –û–¢–í–ï–¢–ê:
1. –ü–†–û–í–ï–†–¨–¢–ï, —á—Ç–æ –í–ï–°–¨ —Ç–µ–∫—Å—Ç –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ
2. –ü–†–û–í–ï–†–¨–¢–ï, —á—Ç–æ –ù–ï–¢ –∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏—Ö –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤
3. –ü–†–û–í–ï–†–¨–¢–ï, —á—Ç–æ matchingPoints, improvementAreas, recommendations - 100% –Ω–∞ –†–£–°–°–ö–û–ú
–ï–°–õ–ò –ö–ê–ö–û–ô-–õ–ò–ë–û –¢–ï–ö–°–¢ –ù–ï –ù–ê –†–£–°–°–ö–û–ú, –ù–ê–ß–ù–ò–¢–ï –ó–ê–ù–û–í–û!
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ö–û–ù–ï–¶ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:

{
  "overallScore": 75,
  "matchingPoints": [
    "–ò–º–µ–µ—Ç –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è JavaScript",
    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é 3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞",
    "..."
  ],
  "improvementAreas": [
    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è React framework",
    "–ù–µ—Ç –æ–ø—ã—Ç–∞ UI/UX –¥–∏–∑–∞–π–Ω–∞",
    "..."
  ],
  "recommendations": [
    "–ò–∑—É—á–∏—Ç—å React –∏ Next.js –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã",
    "–°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ-—Å–∞–π—Ç",
    "..."
  ]
}
`
    };

    const prompt = prompts[language as keyof typeof prompts] || prompts.az;

    console.log('ü§ñ Selected prompt language:', language);
    console.log('üìù Using prompt for language:', language in prompts ? language : 'az (fallback)');

    // Get API key for Gemini
    const apiKeyInfo = await getBestApiKey('gemini');
    const apiKey = apiKeyInfo?.apiKey;
    const apiKeyId = apiKeyInfo?.id;
    
    if (!apiKey) {
      throw new Error('Valid API key tapƒ±lmadƒ±');
    }
    
    let aiResponse = '';
    
    try {
      console.log('üîÑ Job Match AI analizi Gemini 2.5 Flash il…ô...');
      
      // Use Gemini 2.5 Flash model for analysis
      const geminiV1 = new GeminiV1Client(apiKey);
      aiResponse = await geminiV1.generateContent('gemini-2.5-flash', prompt);
      
      // Record successful API usage
      if (apiKeyId) {
        await recordApiUsage(apiKeyId, true, 'Job Match analysis generated (gemini-2.5-flash)');
      }
      
      console.log('‚úÖ Job Match AI analizi uƒüurla tamamlandƒ±');
    } catch (error: any) {
      console.log(`‚ùå Gemini 2.5 Flash failed:`, error.message);
      
      // Fallback to Gemini 2.0 Flash
      try {
        console.log('üîÑ Fallback: Gemini 2.0 Flash il…ô...');
        const geminiV1Fallback = new GeminiV1Client(apiKey);
        aiResponse = await geminiV1Fallback.generateContent('gemini-2.0-flash', prompt);
        
        // Record successful API usage
        if (apiKeyId) {
          await recordApiUsage(apiKeyId, true, 'Job Match analysis generated (gemini-2.0-flash fallback)');
        }
        
        console.log('‚úÖ Job Match AI analizi fallback il…ô tamamlandƒ±');
      } catch (fallbackError: any) {
        console.log(`‚ùå B√ºt√ºn Gemini modell…ôr uƒüursuz:`, fallbackError.message);
        
        // Record API failure
        if (apiKeyId) {
          await markApiKeyFailed(apiKeyId, fallbackError.message);
        }
        
        throw fallbackError;
      }
    }

    try {
      console.log('üîç Job Match AI Response (first 500 chars):', aiResponse.substring(0, 500));
      console.log('üîç Response length:', aiResponse.length);
      console.log('üåê Expected language:', language);

      // Try multiple JSON extraction methods
      let jsonString = '';
      
      // Method 1: Find JSON between curly braces (more flexible)
      const jsonMatch1 = aiResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch1) {
        jsonString = jsonMatch1[0];
      } else {
        // Method 2: Look for JSON between ```json blocks
        const jsonMatch2 = aiResponse.match(/```json\s*([\s\S]*?)\s*```/);
        if (jsonMatch2) {
          jsonString = jsonMatch2[1];
        } else {
          // Method 3: Look for JSON between ``` blocks (without json specifier)
          const jsonMatch3 = aiResponse.match(/```\s*([\s\S]*?)\s*```/);
          if (jsonMatch3) {
            jsonString = jsonMatch3[1].trim();
            // Check if it starts with { and ends with }
            if (jsonString.startsWith('{') && jsonString.endsWith('}')) {
              // Good JSON candidate
            } else {
              jsonString = '';
            }
          }
        }
      }
      
      if (!jsonString) {
        console.log('‚ùå AI response-da JSON tapƒ±lmadƒ±. Response:', aiResponse.substring(0, 500));
        throw new Error('AI response-da JSON tapƒ±lmadƒ±');
      }

      console.log('üîç Extracted JSON:', jsonString.substring(0, 200) + '...');
      
      let analysis;
      try {
        analysis = JSON.parse(jsonString);
      } catch (parseError: any) {
        console.log('‚ùå JSON parse x…ôtasƒ±:', parseError.message);
        console.log('üîç Parse edil…ôc…ôk JSON:', jsonString);
        throw new Error('JSON parse edil…ô bilm…ôdi');
      }
      
      // Validate structure
      if (!analysis.overallScore || !analysis.matchingPoints || !analysis.improvementAreas || !analysis.recommendations) {
        throw new Error('AI response formatƒ± d√ºzg√ºn deyil');
      }
      
      // Ensure score is between 0-100
      analysis.overallScore = Math.max(0, Math.min(100, analysis.overallScore));
      
      console.log(`‚úÖ Job Match analizi parse edildi - Score: ${analysis.overallScore}%`);

      return analysis;
      
    } catch (error: any) {
      console.error('‚ùå Job Match AI response parse x…ôtasƒ±:', error.message);
      
      // Return fallback analysis
      console.log('üîÑ Fallback analizi yaradƒ±lƒ±r...');
      return generateFallbackAnalysis(cvText, jobTitle, jobDescription, language);
    }

  } catch (error) {
    console.error('‚ùå Job Match AI analizi √ºmumi x…ôtasƒ±:', error);
    return generateFallbackAnalysis(cvText, jobTitle, jobDescription, language);
  }
}

// Generate fallback analysis when AI fails
function generateFallbackAnalysis(cvText: string, jobTitle: string, jobDescription: string, language: string = 'az') {
  console.log('üîÑ Fallback Job Match analizi yaradƒ±lƒ±r...', language);
  
  const cvLower = cvText.toLowerCase();
  const jobLower = jobDescription.toLowerCase();
  const titleLower = jobTitle.toLowerCase();
  
  // Basic skill matching
  const commonSkills = ['javascript', 'python', 'react', 'node', 'html', 'css', 'sql', 'git'];
  const matchedSkills = commonSkills.filter(skill => 
    cvLower.includes(skill) && jobLower.includes(skill)
  );
  
  // Calculate basic score
  let score = 50; // Base score
  score += matchedSkills.length * 10; // +10 for each matching skill
  
  if (cvLower.includes('t…ôcr√ºb…ô') || cvLower.includes('experience')) score += 10;
  if (cvLower.includes('universitet') || cvLower.includes('university')) score += 5;
  
  score = Math.max(0, Math.min(100, score));
  
  // Multi-language fallback messages
  const messages = {
    az: {
      matchingPoints: [
        'Profild…ô uyƒüun bacarƒ±qlar m√∂vcuddur',
        'ƒ∞≈ü t…ôcr√ºb…ôsi qeyd edilmi≈üdir',
        'T…ôhsil m…ôlumatlarƒ± d√ºzg√ºnd√ºr'
      ],
      improvementAreas: [
        'Daha spesifik texniki bacarƒ±qlar …ôlav…ô edin',
        'ƒ∞≈ü t…ôcr√ºb…ôsi t…ôsvirl…ôrini geni≈ül…ôndirin',
        'Sertifikat v…ô kurslar …ôlav…ô edin'
      ],
      recommendations: [
        'CV-d…ô i≈ü elanƒ±na uyƒüun a√ßar s√∂zl…ôr istifad…ô edin',
        'Layih…ô portfelinizi …ôlav…ô edin',
        'Pe≈ü…ôkar ≈ü…ôb…ôk…ôni geni≈ül…ôndirin'
      ]
    },
    en: {
      matchingPoints: [
        'Relevant skills are present in the profile',
        'Work experience is documented',
        'Education information is complete'
      ],
      improvementAreas: [
        'Add more specific technical skills',
        'Expand work experience descriptions',
        'Include certifications and courses'
      ],
      recommendations: [
        'Use keywords matching the job posting in your CV',
        'Add your project portfolio',
        'Expand your professional network'
      ]
    },
    ru: {
      matchingPoints: [
        '–í –ø—Ä–æ—Ñ–∏–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏',
        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ª–Ω–∞—è'
      ],
      improvementAreas: [
        '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
        '–†–∞—Å—à–∏—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã',
        '–í–∫–ª—é—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –∫—É—Ä—Å—ã'
      ],
      recommendations: [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –≤–∞—à–µ–º —Ä–µ–∑—é–º–µ',
        '–î–æ–±–∞–≤—å—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤',
        '–†–∞—Å—à–∏—Ä—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–µ—Ç—å'
      ]
    }
  };

  const langMessages = messages[language as keyof typeof messages] || messages.az;
  
  return {
    overallScore: score,
    matchingPoints: langMessages.matchingPoints,
    improvementAreas: langMessages.improvementAreas,
    recommendations: langMessages.recommendations
  };
}