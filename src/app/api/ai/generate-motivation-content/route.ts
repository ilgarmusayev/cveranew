import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getBestApiKey, recordApiUsage, markApiKeyFailed } from '@/lib/api-service';

// Get Gemini AI instance using API keys from database
const getGeminiAI = async () => {
  const apiKeyInfo = await getBestApiKey('gemini');
  
  if (!apiKeyInfo) {
    // Fallback to environment variables if no DB keys available
    const fallbackKeys = [
      process.env.GEMINI_API_KEY,
      process.env.GEMINI_API_KEY_2,
      process.env.GEMINI_API_KEY_3
    ].filter(Boolean) as string[];
    
    if (fallbackKeys.length === 0) {
      throw new Error('No Gemini API keys configured');
    }
    
    console.log('üîÑ Using fallback Gemini API key from environment');
    return {
      geminiAI: new GoogleGenerativeAI(fallbackKeys[0]),
      apiKeyId: null
    };
  }
  
  console.log(`‚úÖ Using Gemini API key from database (ID: ${apiKeyInfo.id})`);
  return {
    geminiAI: new GoogleGenerativeAI(apiKeyInfo.apiKey),
    apiKeyId: apiKeyInfo.id
  };
};

export async function POST(request: NextRequest) {
  try {
    const { prompt, template, language } = await request.json();

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt t…ôl…ôb olunur' },
        { status: 400 }
      );
    }

    const { geminiAI, apiKeyId } = await getGeminiAI();
    const model = geminiAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    // Motivasiya m…ôktubu √º√ß√ºn x√ºsusi prompt hazƒ±rla
    const systemPrompt = `Sen pe≈ü…ôkar motivasiya m…ôktubu yazma m√ºt…ôx…ôssisis…ôn. 

G√∂st…ôril…ôn m…ôlumatlara …ôsas…ôn ${language === 'azerbaijani' ? 'Az…ôrbaycan' : language === 'english' ? 'English' : '–†—É—Å—Å–∫–∏–π'} dilind…ô motivasiya m…ôktubu m…ôzmunu yarat.

≈ûablon n√∂v√º: ${template}

A≈üaƒüƒ±dakƒ± JSON formatƒ±nda cavab ver:
{
  "motivation": "Motivasiya hiss…ôsi - niy…ô bu proqrama/v…ôzif…ôy…ô m√ºraci…ôt edirs…ôn",
  "goals": "M…ôqs…ôdl…ôr - g…ôl…ôc…ôk planlar v…ô n…ô …ôld…ô etm…ôk ist…ôyirs…ôn", 
  "qualifications": "Keyfiyy…ôtl…ôr - g√ºcl√º t…ôr…ôfl…ôr v…ô t…ôcr√ºb…ô",
  "conclusion": "N…ôtic…ô - yekun fikir v…ô minn…ôtdarlƒ±q"
}

H…ôr hiss…ô 2-3 c√ºml…ô olsun, professional v…ô ≈ü…ôxsi ton istifad…ô et.`;

    const fullPrompt = `${systemPrompt}\n\n${prompt}`;

    const result = await model.generateContent(fullPrompt);
    const response = await result.response;
    const text = response.text();

    // Record API usage if we have an API key ID
    if (apiKeyId) {
      await recordApiUsage(apiKeyId, true);
    }

    try {
      // AI cavabƒ±nƒ± JSON kimi parse etm…ôy…ô √ßalƒ±≈ü
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsedContent = JSON.parse(jsonMatch[0]);
        return NextResponse.json(parsedContent);
      } else {
        // ∆èg…ôr JSON formatƒ±nda deyils…ô, sad…ô m…ôtn kimi qaytƒ±r
        return NextResponse.json({
          motivation: text.split('\n')[0] || text.substring(0, 200),
          goals: '',
          qualifications: '',
          conclusion: ''
        });
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      // Parse x…ôtasƒ± olarsa, sad…ô m…ôtn qaytƒ±r
      return NextResponse.json({
        motivation: text.substring(0, 200),
        goals: '',
        qualifications: '',
        conclusion: ''
      });
    }

  } catch (error) {
    console.error('AI motivation content generation error:', error);
    
    // Mark API key as failed if it was a Gemini error
    if (error instanceof Error && error.message.includes('API key')) {
      // We would need the apiKeyId here to mark it as failed
      console.error('Gemini API key error detected');
    }

    return NextResponse.json(
      { 
        error: 'AI k√∂m…ôyi zamanƒ± x…ôta ba≈ü verdi',
        details: error instanceof Error ? error.message : 'Nam…ôlum x…ôta'
      },
      { status: 500 }
    );
  }
}