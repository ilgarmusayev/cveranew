import { GoogleGenerativeAI } from '@google/generative-ai';

// Gemini API client
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export interface CVDataForSummary {
  personalInfo: {
    fullName: string;
    email?: string;
    phone?: string;
    linkedin?: string;
    github?: string;
    website?: string;
  };
  experience?: Array<{
    position: string;
    company: string;
    startDate: string;
    endDate?: string;
    description?: string;
  }>;
  education?: Array<{
    degree: string;
    institution: string;
    startDate: string;
    endDate?: string;
  }>;
  skills?: Array<{
    name: string;
  }>;
  projects?: Array<{
    name: string;
    description?: string;
    technologies?: string[];
  }>;
}

/**
 * Generate professional summary using Gemini AI based on CV data
 */
export async function generateProfessionalSummary(cvData: CVDataForSummary, language?: string): Promise<string> {
  try {
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

    // Create a comprehensive prompt based on CV data and language
    const prompt = createSummaryPrompt(cvData, language);
    
    console.log('ü§ñ Gemini AI il…ô professional summary yaradƒ±lƒ±r...', `Language: ${language || 'azerbaijani'}`);
    console.log('üìù Prompt:', prompt.substring(0, 200) + '...');

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const summary = response.text();

    console.log('‚úÖ Professional summary yaradƒ±ldƒ±:', summary.substring(0, 100) + '...');
    
    return summary.trim();
  } catch (error) {
    console.error('‚ùå Gemini AI error:', error);
    
    // Fallback: Generate basic summary from data
    return generateFallbackSummary(cvData, language);
  }
}

/**
 * Create detailed prompt for Gemini AI
 */
function createSummaryPrompt(cvData: CVDataForSummary, language?: string): string {
  const { personalInfo, experience, education, skills, projects } = cvData;
  
  // Determine target language
  const targetLang = language?.toLowerCase() || 'azerbaijani';
  const isRussian = targetLang.includes('ru') || targetLang === 'russian';
  const isEnglish = targetLang.includes('en') || targetLang === 'english';
  
  let prompt = '';
  
  if (isRussian) {
    prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞—Ä—å–µ—Ä—ã (professional summary). –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω.

–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ò–º—è: ${personalInfo.fullName}`;
  } else if (isEnglish) {
    prompt = `Based on the following CV data, write a professional and engaging career summary. The summary should be in English and maximum 3-4 sentences. Use formal and professional tone.

Personal Information:
- Name: ${personalInfo.fullName}`;
  } else {
    prompt = `A≈üaƒüƒ±daki CV m…ôlumatlarƒ±na …ôsas…ôn professional v…ô c…ôlbedici bir career summary (professional summary) yazƒ±n. Summary Az…ôrbaycan dilind…ô olmalƒ±dƒ±r v…ô maksimum 3-4 c√ºml…ô olmalƒ±dƒ±r. Formal v…ô professional ton istifad…ô edin.

≈û…ôxsi m…ôlumatlar:
- Ad: ${personalInfo.fullName}`;
  }

  if (personalInfo.linkedin) prompt += `\n- LinkedIn: ${personalInfo.linkedin}`;
  if (personalInfo.github) prompt += `\n- GitHub: ${personalInfo.github}`;
  if (personalInfo.website) prompt += `\n- Website: ${personalInfo.website}`;

  if (experience && experience.length > 0) {
    if (isRussian) {
      prompt += `\n\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:`;
    } else if (isEnglish) {
      prompt += `\n\nWork Experience:`;
    } else {
      prompt += `\n\nƒ∞≈ü t…ôcr√ºb…ôsi:`;
    }
    
    experience.slice(0, 3).forEach((exp, index) => {
      prompt += `\n${index + 1}. ${exp.position} - ${exp.company}`;
      if (exp.description) {
        const descLabel = isRussian ? '–û–ø–∏—Å–∞–Ω–∏–µ:' : isEnglish ? 'Description:' : 'T…ôsvir:';
        prompt += `\n   ${descLabel} ${exp.description.substring(0, 200)}`;
      }
    });
  }

  if (education && education.length > 0) {
    if (isRussian) {
      prompt += `\n\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:`;
    } else if (isEnglish) {
      prompt += `\n\nEducation:`;
    } else {
      prompt += `\n\nT…ôhsil:`;
    }
    
    education.forEach((edu, index) => {
      prompt += `\n${index + 1}. ${edu.degree} - ${edu.institution}`;
    });
  }

  if (skills && skills.length > 0) {
    const skillsLabel = isRussian ? '–ù–∞–≤—ã–∫–∏:' : isEnglish ? 'Skills:' : 'Bacarƒ±qlar:';
    prompt += `\n\n${skillsLabel} ${skills.map(s => s.name).join(', ')}`;
  }

  if (projects && projects.length > 0) {
    const projectsLabel = isRussian ? '–ü—Ä–æ–µ–∫—Ç—ã:' : isEnglish ? 'Projects:' : 'Layih…ôl…ôr:';
    prompt += `\n\n${projectsLabel}`;
    projects.slice(0, 2).forEach((project, index) => {
      prompt += `\n${index + 1}. ${project.name}`;
      if (project.description) {
        prompt += ` - ${project.description.substring(0, 100)}`;
      }
      if (project.technologies && project.technologies.length > 0) {
        const techLabel = isRussian ? '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:' : isEnglish ? 'Technologies:' : 'Texnologiyalar:';
        prompt += ` (${techLabel} ${project.technologies.join(', ')})`;
      }
    });
  }

  // Add language-specific instructions
  if (isRussian) {
    prompt += `\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞—Ä—å–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –ë—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ú–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
3. –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç —á–µ–ª–æ–≤–µ–∫–∞
4. –ë—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω
6. –¢–≤–æ—Ä—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ.`;
  } else if (isEnglish) {
    prompt += `\n\nPlease write a professional and engaging career summary based on this information. The summary should meet the following criteria:
1. Be in English
2. Maximum 3-4 sentences
3. Highlight the person's key skills and experience
4. Be useful for job searching
5. Use professional and formal tone
6. Creatively combine the information

Return only the summary text, don't add anything else.`;
  } else {
    prompt += `\n\nXahi≈ü edir…ôm bu m…ôlumatlara …ôsas…ôn professional v…ô c…ôlbedici career summary yazƒ±n. Summary a≈üaƒüƒ±daki kriteriyalara uyƒüun olmalƒ±dƒ±r:
1. Az…ôrbaycan dilind…ô olsun
2. Maksimum 3-4 c√ºml…ô olsun
3. ≈û…ôxsin …ôsas bacarƒ±qlarƒ±nƒ± v…ô t…ôcr√ºb…ôsini vurƒüulasƒ±n
4. ƒ∞≈ü axtarƒ±≈üƒ±nda faydalƒ± olsun
5. Professional v…ô formal ton istifad…ô edin
6. M…ôlumatlarƒ± yaratƒ±cƒ± ≈ü…ôkild…ô birl…ô≈üdirin

Yalnƒ±z summary m…ôtnini qaytarƒ±n, ba≈üqa he√ß n…ô …ôlav…ô etm…ôyin.`;
  }

  return prompt;
}

/**
 * Generate fallback summary when AI fails
 */
function generateFallbackSummary(cvData: CVDataForSummary, language?: string): string {
  const { personalInfo, experience, education, skills } = cvData;
  
  // Determine target language
  const targetLang = language?.toLowerCase() || 'azerbaijani';
  const isRussian = targetLang.includes('ru') || targetLang === 'russian';
  const isEnglish = targetLang.includes('en') || targetLang === 'english';
  
  let summary = `${personalInfo.fullName} - `;
  
  // Add experience info
  if (experience && experience.length > 0) {
    const latestJob = experience[0];
    if (isRussian) {
      summary += `–æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ ${latestJob.position}. `;
      if (experience.length > 1) {
        summary += `–ò–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ ${experience.length} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö. `;
      }
    } else if (isEnglish) {
      summary += `experienced professional in ${latestJob.position}. `;
      if (experience.length > 1) {
        summary += `Has work experience in ${experience.length} different companies. `;
      }
    } else {
      summary += `${latestJob.position} sah…ôsind…ô t…ôcr√ºb…ôli m√ºt…ôx…ôssis. `;
      if (experience.length > 1) {
        summary += `${experience.length} m√ºxt…ôlif ≈üirk…ôtd…ô i≈ü t…ôcr√ºb…ôsi var. `;
      }
    }
  }
  
  // Add education
  if (education && education.length > 0) {
    const latestEdu = education[0];
    if (isRussian) {
      summary += `–ü–æ–ª—É—á–∏–ª –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ ${latestEdu.institution}. `;
    } else if (isEnglish) {
      summary += `Educated at ${latestEdu.institution}. `;
    } else {
      summary += `${latestEdu.institution}-d…ô t…ôhsil alƒ±b. `;
    }
  }
  
  // Add skills
  if (skills && skills.length > 0) {
    const topSkills = skills.slice(0, 3).map(s => s.name).join(', ');
    if (isRussian) {
      summary += `–û–±–ª–∞–¥–∞–µ—Ç –Ω–∞–≤—ã–∫–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ ${topSkills}. `;
    } else if (isEnglish) {
      summary += `Skilled in ${topSkills}. `;
    } else {
      summary += `${topSkills} sah…ôl…ôrind…ô bacarƒ±qlƒ±dƒ±r. `;
    }
  }
  
  // Add closing statement
  if (isRussian) {
    summary += `–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º –≤—ã–∑–æ–≤–∞–º.`;
  } else if (isEnglish) {
    summary += `Ready for new opportunities and upcoming challenges.`;
  } else {
    summary += `Yeni imkanlar v…ô qar≈üƒ±dakƒ± √ßaƒüƒ±rƒ±≈ülar √º√ß√ºn hazƒ±rdƒ±r.`;
  }
  
  return summary;
}

/**
 * Validate if user has Premium access for AI features
 */
export function canUseAIFeatures(userTier: string): boolean {
  const tier = userTier.toLowerCase();
  return tier === 'premium' || tier === 'medium' || tier === 'pro' || tier === 'populyar';
}

/**
 * Get AI feature availability message for user
 */
export function getAIFeatureMessage(userTier: string): string {
  if (canUseAIFeatures(userTier)) {
    return 'AI-powered professional summary m√∂vcuddur!';
  }
  
  return 'AI professional summary Premium, Pro v…ô Medium istifad…ô√ßil…ôr √º√ß√ºn m√∂vcuddur. Planƒ±nƒ±zƒ± y√ºks…ôldin!';
}
